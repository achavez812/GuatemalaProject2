package com.stanford.guatemedic;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Arrays;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.androidplot.xy.LineAndPointFormatter;
import com.androidplot.xy.SimpleXYSeries;
import com.androidplot.xy.XYPlot;
import com.androidplot.xy.XYSeries;
import com.stanford.guatemedic.R.color;

public class GraphActivity extends ActionBarActivity {
	
	//This represents age in months and matches up with weight/height data
    static Number[] x_weight_values_month = {0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5, 24.5, 25.5, 26.5, 27.5, 28.5, 29.5, 30.5, 31.5, 32.5, 33.5, 34.5, 35.5, 36};
    static Number[] x_height_values_month = {0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5, 24.5, 25.5, 26.5, 27.5, 28.5, 29.5, 30.5, 31.5, 32.5, 33.5, 34.5, 35.5};
    static Number[] x_weight_values_week = {0.0, 2.17, 6.52, 10.86, 15.21, 19.55, 23.9, 28.24, 32.59, 36.93, 41.28, 45.63, 49.97, 54.32, 58.66, 63.01, 67.35, 71.7, 76.04, 80.39, 84.73, 89.08, 93.42, 97.77, 102.11, 106.46, 110.8, 115.15, 119.49, 123.84, 128.18, 132.53, 136.88, 141.22, 145.57, 149.91, 154.26, 156.43};
    static Number[] x_height_values_week = {0.0, 2.17, 6.52, 10.86, 15.21, 19.55, 23.9, 28.24, 32.59, 36.93, 41.28, 45.63, 49.97, 54.32, 58.66, 63.01, 67.35, 71.7, 76.04, 80.39, 84.73, 89.08, 93.42, 97.77, 102.11, 106.46, 110.8, 115.15, 119.49, 123.84, 128.18, 132.53, 136.88, 141.22, 145.57, 149.91, 154.26};
    
    static int data_indices[] = {0, 2, 4, 6, 8};
    static double[] z_score_values = {-1.881, -1.645, -1.281, -0.674, 0, 0.674, 1.281, 1.645, 1.881};
    //9 growth curves for each
    //1: 3rd percentile: z = -1.881
    //2: 5th percentile: z = -1.645 
    //3: 10th percentile: z = -1.281
    //4: 25th percentile: z = -0.674
    //5: 50th percentile: z = 0
    //6: 75th percentile: z = 0.674
    //7: 90th percentile: z = 1.281
    //8: 95th percentile: z = 1.645
    //9: 97th percentile: z = 1.881
    
    //Centimeters
    static Number[][] male_height_data = {
        {44.9251, 47.97812, 52.19859, 55.26322, 57.73049, 59.82569, 61.66384, 63.31224, 64.81395, 66.19833, 67.48635, 68.6936, 69.832, 70.91088, 71.9377, 72.91853, 73.85839, 74.76147, 75.63132, 76.47096, 77.283, 78.06971, 78.83308, 79.57485, 80.29656, 80.99959, 81.74464, 82.47365, 83.18812, 83.88931, 84.57826, 85.25589, 85.92294, 86.58009, 87.22791, 87.86696, 88.49774},
        {45.56841, 48.55809, 52.72611, 55.77345, 58.23744, 60.33647, 62.18261, 63.84166, 65.35584, 66.75398, 68.05675, 69.27949, 70.43397, 71.52941, 72.57318, 73.5713, 74.52871, 75.44958, 76.33742, 77.19523, 78.0256, 78.83077, 79.61271, 80.37315, 81.11363, 81.83552, 82.58135, 83.31105, 84.02609, 84.72769, 85.41688, 86.09452, 86.76134, 87.41799, 88.06503, 88.70301, 89.33242},
        {46.55429, 49.4578, 53.55365, 56.57772, 59.0383, 61.1441, 63.00296, 64.67854, 66.21181, 67.63088, 68.95591, 70.20192, 71.38046, 72.50055, 73.56946, 74.59309, 75.57634, 76.5233, 77.43742, 78.32168, 79.17863, 80.01048, 80.81919, 81.60646, 82.37381, 83.12259, 83.87245, 84.60576, 85.32399, 86.02833, 86.71978, 87.39917, 88.06723, 88.72457, 89.37177, 90.00937, 90.63786},
        {48.18937, 50.97919, 54.9791, 57.9744, 60.43433, 62.55409, 64.43546, 66.13896, 67.70375, 69.15682, 70.51761, 71.80065, 73.01712, 74.17581, 75.2838, 76.34685, 77.36973, 78.35646, 79.31042, 80.23453, 81.13131, 82.00292, 82.85129, 83.67811, 84.48487, 85.2729, 86.03703, 86.78329, 87.51317, 88.22788, 88.9284, 89.6156, 90.2902, 90.95287, 91.60421, 92.24482, 92.87525},
        {49.98888, 52.69598, 56.62843, 59.60895, 62.077, 64.21686, 66.12531, 67.86018, 69.45908, 70.94804, 72.34586, 73.66665, 74.9213, 76.11838, 77.2648, 78.36622, 79.42734, 80.45209, 81.44384, 82.40544, 83.33938, 84.24783, 85.1327, 85.99565, 86.83818, 87.66161, 88.45247, 89.22326, 89.97549, 90.71041, 91.42908, 92.13242, 92.82127, 93.49638, 94.15847, 94.80823, 95.44637},
        {51.77126, 54.44054, 58.35059, 61.33788, 63.82543, 65.99131, 67.92935, 69.69579, 71.32735, 72.84947, 74.2806, 75.63462, 76.92224, 78.15196, 79.33061, 80.4638, 81.5562, 82.61174, 83.63377, 84.62515, 85.58837, 86.52562, 87.43879, 88.32957, 89.19948, 90.04985, 90.8787, 91.68468, 92.46929, 93.23385, 93.97951, 94.70732, 95.41824, 96.11319, 96.79307, 97.45873, 98.11108},
        {53.36153, 56.03444, 59.9664, 62.98158, 65.49858, 67.69405, 69.66122, 71.45609, 73.11525, 74.6641, 76.1211, 77.50016, 78.81202, 80.0652, 81.2666, 82.42185, 83.53568, 84.61204, 85.65431, 86.66541, 87.64786, 88.60385, 89.53533, 90.44402, 91.33143, 92.19893, 93.07143, 93.91817, 94.74064, 95.54016, 96.318, 97.07531, 97.81324, 98.53287, 99.23531, 99.92162, 100.5929},
        {54.30721, 56.99908, 60.96465, 64.00789, 66.54889, 68.76538, 70.75128, 72.56307, 74.23767, 75.80074, 77.27095, 78.66234, 79.98578, 81.2499, 82.46167, 83.6268, 84.75006, 85.83547, 86.88645, 87.90595, 88.89652, 89.86038, 90.79951, 91.71563, 92.61031, 93.48491, 94.38775, 95.263, 96.1121, 96.93639, 97.73717, 98.51569, 99.27318, 100.0109, 100.73, 101.4318, 102.1174},
        {54.919, 57.62984, 61.62591, 64.69241, 67.2519, 69.48354, 71.48218, 73.30488, 74.98899, 76.56047, 78.03819, 79.43637, 80.76602, 82.03585, 83.25292, 84.42302, 85.55095, 86.64078, 87.69597, 88.7195, 89.71393, 90.68153, 91.62428, 92.54392, 93.44203, 94.31998, 95.24419, 96.13962, 97.00763, 97.84957, 98.66677, 99.46052, 100.2321, 100.9829, 101.7142, 102.4274, 103.1237}
    };
	
    //Kilograms
    static Number[][] male_weight_data = {
        {2.355451, 2.799549, 3.614688, 4.342341, 4.992898, 5.575169, 6.096775, 6.56443, 6.984123, 7.361236, 7.700624, 8.006677, 8.283365, 8.534275, 8.762649, 8.971407, 9.16318, 9.340328, 9.504964, 9.658975, 9.804039, 9.941645, 10.07311, 10.19957, 10.32206, 10.44144, 10.55847, 10.6738, 10.78798, 10.90147, 11.01466, 11.12787, 11.24135, 11.3553, 11.46988, 11.58521, 11.70137, 11.75978},
        {2.526904, 2.964656, 3.774849, 4.503255, 5.157412, 5.744752, 6.272175, 6.745993, 7.171952, 7.555287, 7.900755, 8.212684, 8.495, 8.751264, 8.984701, 9.198222, 9.394454, 9.575757, 9.744251, 9.90183, 10.05019, 10.19082, 10.32507, 10.4541, 10.57895, 10.70051, 10.81958, 10.93681, 11.0528, 11.16803, 11.28293, 11.39782, 11.513, 11.62869, 11.74508, 11.8623, 11.98046, 12.03991},
        {2.773802, 3.20951, 4.020561, 4.754479, 5.416803, 6.013716, 6.551379, 7.035656, 7.472021, 7.865533, 8.220839, 8.542195, 8.833486, 9.098246, 9.339688, 9.560722, 9.763982, 9.95184, 10.12643, 10.28968, 10.4433, 10.58881, 10.72759, 10.86084, 10.98963, 11.1149, 11.23747, 11.35806, 11.47728, 11.59567, 11.71368, 11.8317, 11.95005, 12.069, 12.18875, 12.30948, 12.43132, 12.49268},
        {3.150611, 3.597396, 4.428873, 5.183378, 5.866806, 6.484969, 7.043627, 7.548346, 8.004399, 8.416719, 8.789882, 9.12811, 9.435279, 9.714942, 9.970338, 10.20442, 10.41986, 10.6191, 10.80433, 10.97753, 11.14047, 11.29477, 11.44185, 11.58298, 11.7193, 11.85182, 11.98142, 12.10889, 12.23491, 12.36007, 12.4849, 12.60983, 12.73523, 12.86144, 12.9887, 13.11723, 13.24721, 13.31278},
        {3.530203, 4.003106, 4.879525, 5.672889, 6.391392, 7.041836, 7.630425, 8.162951, 8.644832, 9.08112, 9.4765, 9.835308, 10.16154, 10.45885, 10.73063, 10.97992, 11.20956, 11.42207, 11.61978, 11.80478, 11.97897, 12.14404, 12.30154, 12.45283, 12.59913, 12.74154, 12.88102, 13.01842, 13.1545, 13.2899, 13.42519, 13.56088, 13.69738, 13.83505, 13.97418, 14.11503, 14.2578, 14.32994},
        {3.879077, 4.387423, 5.327328, 6.175598, 6.942217, 7.635323, 8.262033, 8.828786, 9.34149, 9.805593, 10.22612, 10.60772, 10.95466, 11.27087, 11.55996, 11.82524, 12.06973, 12.29617, 12.50708, 12.70473, 12.89117, 13.06825, 13.23765, 13.40086, 13.5592, 13.71386, 13.8659, 14.01623, 14.16567, 14.31493, 14.46462, 14.61527, 14.76732, 14.92117, 15.07711, 15.23541, 15.39628, 15.47772},
        {4.172493, 4.718161, 5.728153, 6.638979, 7.460702, 8.202193, 8.871384, 9.475466, 10.02101, 10.51406, 10.96017, 11.36445, 11.7316, 12.06595, 12.37145, 12.65175, 12.91015, 13.14969, 13.37311, 13.5829, 13.78133, 13.97042, 14.15201, 14.32772, 14.499, 14.66716, 14.83332, 14.99848, 15.16351, 15.32917, 15.4961, 15.66485, 15.83588, 16.00958, 16.18624, 16.36612, 16.5494, 16.64237},
        {4.340293, 4.91013, 5.967102, 6.921119, 7.781401, 8.556813, 9.255615, 9.885436, 10.45331, 10.96574, 11.42868, 11.84763, 12.22766, 12.5734, 12.88911, 13.17867, 13.44564, 13.69325, 13.92444, 14.14187, 14.34795, 14.54484, 14.73448, 14.91861, 15.09876, 15.2763, 15.45242, 15.62819, 15.8045, 15.98214, 16.16177, 16.34395, 16.52915, 16.71773, 16.91, 17.10619, 17.30646, 17.40816},
        {4.446488, 5.032625, 6.121929, 7.10625, 7.993878, 8.793444, 9.513307, 10.16135, 10.74492, 11.27084, 11.74538, 12.17436, 12.56308, 12.91645, 13.23893, 13.53462, 13.80724, 14.06019, 14.29655, 14.51909, 14.73034, 14.93256, 15.12777, 15.31777, 15.50418, 15.68841, 15.8717, 16.05514, 16.23967, 16.42609, 16.61508, 16.8072, 17.00291, 17.2026, 17.40654, 17.61495, 17.82797, 17.93625}
    };
    
    static Number[][] male_weight_data_pounds = {
    	{5.192827, 6.171886, 7.968941, 9.573125, 11.007343, 12.291018, 13.44095, 14.471942, 15.397198, 16.228581, 16.976796, 17.65152, 18.261506, 18.814663, 19.318136, 19.778364, 20.201147, 20.591687, 20.954644, 21.294176, 21.613984, 21.917351, 22.207178, 22.485972, 22.756013, 23.019199, 23.277203, 23.531459, 23.783181, 24.033381, 24.282919, 24.532502, 24.78268, 25.033894, 25.286497, 25.540754, 25.79684, 25.925611},
    	{5.570813, 6.535881, 8.322032, 9.927876, 11.37003, 12.66488, 13.827637, 14.872216, 15.811285, 16.656386, 17.418004, 18.105683, 18.728077, 19.293037, 19.807672, 20.2784, 20.711013, 21.110714, 21.482176, 21.829574, 22.156649, 22.466682, 22.762649, 23.047109, 23.322353, 23.590344, 23.852846, 24.111291, 24.367003, 24.621039, 24.874347, 25.127634, 25.38156, 25.63661, 25.893203, 26.151627, 26.412122, 26.543186},
    	{6.115124, 7.075686, 8.863729, 10.481724, 11.941884, 13.257838, 14.44317, 15.510807, 16.472817, 17.340354, 18.123662, 18.832123, 19.474303, 20.057993, 20.590276, 21.077568, 21.525675, 21.939826, 22.324728, 22.684629, 23.023299, 23.344091, 23.650045, 23.943808, 24.227738, 24.503909, 24.774126, 25.039979, 25.302811, 25.563814, 25.823979, 26.084166, 26.34508, 26.607317, 26.871318, 27.13748, 27.406088, 27.541362},
    	{6.945837, 7.930819, 9.763893, 11.427275, 12.933961, 14.296763, 15.52838, 16.641084, 17.646498, 18.555499, 19.378174, 20.123831, 20.801016, 21.417561, 21.980607, 22.496664, 22.971623, 23.410868, 23.819226, 24.201063, 24.56028, 24.90045, 25.224703, 25.535838, 25.836369, 26.128522, 26.414239, 26.695259, 26.973083, 27.24901, 27.524211, 27.799631, 28.076088, 28.354331, 28.634888, 28.918245, 29.204799, 29.349355},
    	{7.782686, 8.825247, 10.757401, 12.506451, 14.090463, 15.524432, 16.822035, 17.996042, 19.058397, 20.020237, 20.891892, 21.68292, 22.402131, 23.057581, 23.656747, 24.206332, 24.712596, 25.181096, 25.616967, 26.024818, 26.408837, 26.772751, 27.119975, 27.453509, 27.776042, 28.089999, 28.397497, 28.700409, 29.000411, 29.298914, 29.597174, 29.896316, 30.197244, 30.500751, 30.807477, 31.117995, 31.432746, 31.591786},
    	{8.551813, 9.672513, 11.744627, 13.614723, 15.304812, 16.832833, 18.214478, 19.463942, 20.594249, 21.61741, 22.544504, 23.38578, 24.150643, 24.84776, 25.485088, 26.069924, 26.608927, 27.108136, 27.573109, 28.008848, 28.419873, 28.810264, 29.183723, 29.543536, 29.892612, 30.233576, 30.568763, 30.900181, 31.229636, 31.558695, 31.888701, 32.220824, 32.556034, 32.895211, 33.238997, 33.587985, 33.942639, 34.122182},
    	{9.198678, 10.401658, 12.628286, 14.636293, 16.447864, 18.082555, 19.557853, 20.889612, 22.092319, 23.179297, 24.162791, 25.054066, 25.863485, 26.600593, 27.274099, 27.892048, 28.461717, 28.989807, 29.482358, 29.944861, 30.38232, 30.799188, 31.199521, 31.586892, 31.964495, 32.335221, 32.701537, 33.065649, 33.429474, 33.794688, 34.162702, 34.534728, 34.911781, 35.29472, 35.684185, 36.080748, 36.484807, 36.689769},
    	{9.56861, 10.824873, 13.155073, 15.258299, 17.154877, 18.86435, 20.404929, 21.793432, 23.045367, 24.17507, 25.195668, 26.119285, 26.957099, 27.719318, 28.415332, 29.053696, 29.642258, 30.188139, 30.69782, 31.177167, 31.631491, 32.065554, 32.483635, 32.889568, 33.286726, 33.678131, 34.066405, 34.453908, 34.842601, 35.234226, 35.630238, 36.031872, 36.440164, 36.855908, 37.279786, 37.712306, 38.153822, 38.37803},
    	{9.802727, 11.094925, 13.496405, 15.666439, 17.623303, 19.386027, 20.973037, 22.401712, 23.688251, 24.847694, 25.893865, 26.839594, 27.696566, 28.475606, 29.186545, 29.838423, 30.439441, 30.997095, 31.518174, 32.008786, 32.474508, 32.920322, 33.350682, 33.769556, 34.180515, 34.586669, 34.99075, 35.395162, 35.801976, 36.212958, 36.629605, 37.053153, 37.484615, 37.924852, 38.374458, 38.833919, 39.303543, 39.542257}
    };
	
    //Centimeters
    static Number[][] female_height_data = {
        {45.09488, 47.46916, 50.95701, 53.62925, 55.8594, 57.8047, 59.54799, 61.13893, 62.60993, 63.98348, 65.2759, 66.49948, 67.66371, 68.77613, 69.8428, 70.86874, 71.85807, 72.81433, 73.74047, 74.63908, 75.51237, 76.36229, 77.19056, 77.99868, 78.78801, 79.55974, 80.33998, 81.11332, 81.87334, 82.61506, 83.33473, 84.02972, 84.69837, 85.33987, 85.95413, 86.54167, 87.10349},
        {45.57561, 47.96324, 51.47996, 54.17907, 56.43335, 58.40032, 60.16323, 61.77208, 63.25958, 64.64845, 65.9552, 67.19226, 68.36925, 69.4938, 70.57207, 71.60911, 72.60914, 73.57571, 74.51184, 75.42012, 76.30282, 77.16191, 77.9991, 78.81595, 79.61381, 80.39391, 81.18804, 81.97223, 82.74084, 83.48951, 84.21496, 84.91494, 85.58809, 86.23379, 86.85208, 87.44359, 88.00937},
        {46.33934, 48.74248, 52.29627, 55.03144, 57.31892, 59.31633, 61.10726, 62.7421, 64.25389, 65.66559, 66.99394, 68.25154, 69.44814, 70.59149, 71.68784, 72.74233, 73.75924, 74.74217, 75.6942, 76.61797, 77.51576, 78.38958, 79.2412, 80.07216, 80.88385, 81.67752, 82.49318, 83.29459, 84.07717, 84.83741, 85.57273, 86.28139, 86.96242, 87.6155, 88.24089, 88.83932, 89.41196},
        {47.68345, 50.09686, 53.69078, 56.47125, 58.80346, 60.84386, 62.6759, 64.35005, 65.89952, 67.34745, 68.7107, 70.00202, 71.23128, 72.40633, 73.53349, 74.61799, 75.66416, 76.67568, 77.65565, 78.60678, 79.53138, 80.4315, 81.30893, 82.16525, 83.00187, 83.82007, 84.67209, 85.5036, 86.31151, 87.09346, 87.84783, 88.57362, 89.27042, 89.93835, 90.57795, 91.1902, 91.77639},
        {49.2864, 51.68358, 55.28613, 58.09382, 60.45981, 62.5367, 64.40633, 66.11842, 67.70574, 69.19124, 70.59164, 71.91962, 73.18501, 74.39564, 75.55785, 76.67686, 77.75701, 78.80198, 79.81492, 80.79852, 81.75512, 82.68679, 83.59532, 84.48233, 85.34924, 86.19732, 87.09026, 87.95714, 88.79602, 89.60551, 90.38477, 91.13342, 91.85154, 92.53964, 93.19854, 93.82945, 94.43382},
        {51.0187, 53.36362, 56.93136, 59.74045, 62.1233, 64.22507, 66.12418, 67.8685, 69.48975, 71.01019, 72.44614, 73.80997, 75.11133, 76.35791, 77.55594, 78.71058, 79.82613, 80.90623, 81.95399, 82.97211, 83.96292, 84.92846, 85.87054, 86.79077, 87.69056, 88.57121, 89.50562, 90.40982, 91.28258, 92.12313, 92.93113, 93.70662, 94.45005, 95.16218, 95.84411, 96.49721, 97.12307},
        {52.7025, 54.96222, 58.45612, 61.24306, 63.62648, 65.74096, 67.65995, 69.42868, 71.07731, 72.62711, 74.09378, 75.48923, 76.82282, 78.10202, 79.3329, 80.5205, 81.66903, 82.78208, 83.86269, 84.91353, 85.93689, 86.93481, 87.90908, 88.86127, 89.79282, 90.70499, 91.67718, 92.61658, 93.52227, 94.39371, 95.23082, 96.03385, 96.80343, 97.54052, 98.24636, 98.92246, 99.57056},
        {53.77291, 55.96094, 59.38911, 62.15166, 64.52875, 66.64653, 68.57452, 70.35587, 72.01952, 73.58601, 75.0705, 76.4846, 77.83742, 79.13625, 80.38705, 81.59475, 82.7635, 83.89683, 84.99774, 86.06887, 87.11249, 88.13061, 89.125, 90.09723, 91.04873, 91.98074, 92.97574, 93.93693, 94.86339, 95.75464, 96.61061, 97.43164, 98.2184, 98.97193, 99.69353, 100.3848, 101.0475},
        {54.49527, 56.62728, 60.00338, 62.74547, 65.11577, 67.23398, 69.16668, 70.95545, 72.62835, 74.20532, 75.70118, 77.12729, 78.49257, 79.80419, 81.06801, 82.28891, 83.47098, 84.6177, 85.73205, 86.81663, 87.8737, 88.90526, 89.91305, 90.89866, 91.86347, 92.80876, 93.81864, 94.79426, 95.73464, 96.63928, 97.50808, 98.34139, 99.13993, 99.90473, 100.6372, 101.3388, 102.0116}    
    };
    
    //Kilograms
    static Number[][] female_weight_data = {
        {2.414112, 2.756917, 3.402293, 3.997806, 4.547383, 5.054539, 5.5225, 5.954272, 6.352668, 6.720328, 7.059732, 7.373212, 7.662959, 7.93103, 8.179356, 8.409744, 8.623887, 8.82337, 9.009668, 9.18416, 9.348127, 9.50276, 9.649162, 9.788355, 9.921281, 10.04881, 10.17173, 10.29079, 10.40664, 10.5199, 10.63112, 10.74078, 10.84935, 10.95722, 11.06475, 11.17225, 11.28, 11.33404},
        {2.547905, 2.894442, 3.54761, 4.150639, 4.707123, 5.220488, 5.693974, 6.130641, 6.533373, 6.904886, 7.247736, 7.564327, 7.856916, 8.127621, 8.378425, 8.611186, 8.827638, 9.029399, 9.21798, 9.394782, 9.56111, 9.71817, 9.867081, 10.00887, 10.1445, 10.27483, 10.40066, 10.52274, 10.64171, 10.75819, 10.87273, 10.98581, 11.09789, 11.20934, 11.32054, 11.43177, 11.54332, 11.59929},
        {2.747222, 3.101767, 3.770157, 4.387042, 4.955926, 5.480295, 5.96351, 6.408775, 6.819122, 7.197414, 7.546342, 7.868436, 8.166069, 8.44146, 8.696684, 8.93368, 9.154251, 9.360079, 9.552723, 9.73363, 9.90414, 10.06549, 10.21882, 10.36518, 10.50553, 10.64076, 10.77167, 10.89899, 11.02338, 11.14545, 11.26575, 11.38474, 11.50288, 11.62054, 11.73806, 11.85574, 11.97384, 12.03312},
        {3.064865, 3.437628, 4.138994, 4.78482, 5.379141, 5.925888, 6.428828, 6.891533, 7.317373, 7.709516, 8.070932, 8.4044, 8.712513, 8.997692, 9.262185, 9.508085, 9.737329, 9.951715, 10.1529, 10.34241, 10.52167, 10.69196, 10.85446, 11.01027, 11.16037, 11.30567, 11.44697, 11.58501, 11.72047, 11.85392, 11.98592, 12.11692, 12.24735, 12.37757, 12.50791, 12.63865, 12.77001, 12.836},
        {3.399186, 3.797528, 4.544777, 5.230584, 5.859961, 6.437588, 6.96785, 7.454854, 7.902436, 8.314178, 8.693418, 9.043262, 9.366594, 9.666089, 9.944226, 10.20329, 10.44541, 10.67251, 10.88639, 11.08868, 11.2809, 11.4644, 11.64043, 11.81014, 11.97454, 12.13456, 12.29102, 12.44469, 12.59622, 12.74621, 12.89517, 13.04357, 13.19181, 13.34023, 13.48913, 13.63877, 13.78937, 13.86507},
        {3.717519, 4.145594, 4.946766, 5.680083, 6.351512, 6.966524, 7.53018, 8.047178, 8.521877, 8.958324, 9.360271, 9.731193, 10.07431, 10.39258, 10.68874, 10.96532, 11.22463, 11.46878, 11.69972, 11.91921, 12.12887, 12.33016, 12.52439, 12.71277, 12.89636, 13.07613, 13.25293, 13.42753, 13.60059, 13.77271, 13.9444, 14.11611, 14.28822, 14.46106, 14.63491, 14.80998, 14.98647, 15.07529},
        {3.992572, 4.450126, 5.305632, 6.087641, 6.80277, 7.457119, 8.056331, 8.605636, 9.109878, 9.573546, 10.00079, 10.39545, 10.76106, 11.10089, 11.41792, 11.71491, 11.99438, 12.25862, 12.50974, 12.74964, 12.98004, 13.2025, 13.41844, 13.62911, 13.83564, 14.03902, 14.24017, 14.43984, 14.63873, 14.83743, 15.03646, 15.23626, 15.43719, 15.63957, 15.84365, 16.04963, 16.25767, 16.3625},
        {4.152637, 4.628836, 5.519169, 6.332837, 7.076723, 7.757234, 8.38033, 8.951544, 9.476009, 9.95848, 10.40335, 10.8147, 11.19625, 11.55145, 11.88348, 12.19522, 12.48934, 12.76825, 13.03415, 13.28904, 13.53473, 13.77284, 14.00484, 14.23205, 14.45561, 14.67659, 14.89587, 15.11428, 15.33249, 15.55113, 15.7707, 15.99164, 16.21432, 16.43904, 16.66605, 16.89553, 17.12762, 17.24469},
        {4.254922, 4.743582, 5.657379, 6.492574, 7.256166, 7.95473, 8.594413, 9.180938, 9.719621, 10.21539, 10.6728, 11.09607, 11.48908, 11.85539, 12.19829, 12.52078, 12.82561, 13.11527, 13.39204, 13.65799, 13.91497, 14.16467, 14.40858, 14.64807, 14.88432, 15.11839, 15.35122, 15.58363, 15.81632, 16.0499, 16.28491, 16.52176, 16.76085, 17.00245, 17.24681, 17.49412, 17.7445, 17.87089}    
    };
    
    static Number[][] female_weight_data_pounds = {
    	{5.322151, 6.077899, 7.500695, 8.813563, 10.025161, 11.143237, 12.174904, 13.126788, 14.005092, 14.815635, 15.563885, 16.254983, 16.893759, 17.484749, 18.032208, 18.540122, 19.012221, 19.452002, 19.862714, 20.247399, 20.608881, 20.949785, 21.272543, 21.579407, 21.872456, 22.153607, 22.424596, 22.687076, 22.942479, 23.192172, 23.437367, 23.679124, 23.918477, 24.156287, 24.393348, 24.630342, 24.867888, 24.987025},
    	{5.617111, 6.381087, 7.821061, 9.150499, 10.377323, 11.509088, 12.552935, 13.515611, 14.403474, 15.222512, 15.978359, 16.676315, 17.321357, 17.918153, 18.471076, 18.984221, 19.461411, 19.906213, 20.321959, 20.711736, 21.078423, 21.424678, 21.752967, 22.065555, 22.364565, 22.65189, 22.929295, 23.198433, 23.460714, 23.717506, 23.970021, 24.219317, 24.466408, 24.712111, 24.957262, 25.20248, 25.448403, 25.571795},
    	{6.056526, 6.838156, 8.311688, 9.671673, 10.925834, 12.081858, 13.147154, 14.128785, 15.033436, 15.867419, 16.636666, 17.346754, 18.002916, 18.610043, 19.17271, 19.695191, 20.181462, 20.63523, 21.059933, 21.458761, 21.834667, 22.190379, 22.528411, 22.851076, 23.160491, 23.458619, 23.747224, 24.027913, 24.302144, 24.571259, 24.836472, 25.098798, 25.359249, 25.618642, 25.877727, 26.137164, 26.397528, 26.528216},
    	{6.756801, 7.578595, 9.124826, 10.548614, 11.858854, 13.064213, 14.172994, 15.193074, 16.131881, 16.996399, 17.793177, 18.52834, 19.207606, 19.836312, 20.419413, 20.961524, 21.466916, 21.939551, 22.383083, 22.800877, 23.196074, 23.571495, 23.929743, 24.273241, 24.604152, 24.92448, 25.23599, 25.540313, 25.838948, 26.133152, 26.424159, 26.712962, 27.000508, 27.287591, 27.574938, 27.863168, 28.152764, 28.298246},
    	{7.493845, 8.37203, 10.019415, 11.531345, 12.91887, 14.192307, 15.361322, 16.434971, 17.42171, 18.329437, 19.165509, 19.936775, 20.649593, 21.30986, 21.923041, 22.494173, 23.027951, 23.528616, 24.000135, 24.446104, 24.869872, 25.274416, 25.662492, 26.036635, 26.399071, 26.751851, 27.096783, 27.435564, 27.769627, 28.100295, 28.428692, 28.755854, 29.082664, 29.409871, 29.738136, 30.068032, 30.400045, 30.566933},
    	{8.195642, 9.139377, 10.90564, 12.522311, 14.002543, 15.358399, 16.601035, 17.740809, 18.78733, 19.749521, 20.635653, 21.453388, 22.209824, 22.911482, 23.564396, 24.174144, 24.745819, 25.284072, 25.793203, 26.27709, 26.739307, 27.183071, 27.61127, 28.026573, 28.431315, 28.827636, 29.217409, 29.602333, 29.983861, 30.363316, 30.741824, 31.120376, 31.49981, 31.880853, 32.264123, 32.650082, 33.039172, 33.234984},
    	{8.802024, 9.810748, 11.696796, 13.420813, 14.997387, 16.439965, 17.760987, 18.971985, 20.083637, 21.10584, 22.047742, 22.917809, 23.723833, 24.473022, 25.171946, 25.826691, 26.44281, 27.025354, 27.578973, 28.107856, 28.615796, 29.106232, 29.582293, 30.046736, 30.502052, 30.950423, 31.393879, 31.834071, 32.272544, 32.710598, 33.14938, 33.589859, 34.032829, 34.478996, 34.928911, 35.383014, 35.841659, 36.072768},
    	{9.154904, 10.204732, 12.16756, 13.961372, 15.601344, 17.101598, 18.475276, 19.734574, 20.890809, 21.954465, 22.935225, 23.842088, 24.683253, 25.466327, 26.19832, 26.885582, 27.533999, 28.148884, 28.735087, 29.297018, 29.838666, 30.363603, 30.87507, 31.375977, 31.868838, 32.35601, 32.839435, 33.320942, 33.802007, 34.284021, 34.768085, 35.25517, 35.74609, 36.241508, 36.741974, 37.247885, 37.759551, 38.017644},
    	{9.380401, 10.457701, 12.472258, 14.313529, 15.996944, 17.536998, 18.947243, 20.240296, 21.427876, 22.520849, 23.529255, 24.462396, 25.328826, 26.136393, 26.89235, 27.603312, 28.27534, 28.913924, 29.524091, 30.110405, 30.676943, 31.227431, 31.765155, 32.293135, 32.813972, 33.330003, 33.8433, 34.355671, 34.868659, 35.38361, 35.901713, 36.423872, 36.95097, 37.483601, 38.022317, 38.567537, 39.119525, 39.398164}
    };
	
    private static String child_id;
    private static Number[] child_age_in_weeks_weight;
    private static Number[] child_age_in_weeks_height;
    private static Number[] child_weight;
    private static Number[] child_height;

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_graph);
		getActionBar().setHomeButtonEnabled(true);
		child_id = getIntent().getStringExtra("child_id");
		DetailedChild child = DetailedRecordsStore.get(getApplication()).getChild(child_id);
		processVisits(child);
		setTitle(child.getName());
		if (savedInstanceState == null) {
			getSupportFragmentManager().beginTransaction().add(R.id.left_content, GraphFragmentLeft.newInstance(child_id)).commit();
			getSupportFragmentManager().beginTransaction().add(R.id.right_content, GraphFragmentRight.newInstance(child_id)).commit();

		}
	}
	
	private void processVisits(DetailedChild child) {
		ArrayList<DetailedChildVisit> visits = child.getChild_visits();
		String date_of_birth = child.getDob();
		int birth_weight_plus = 0;
		int birth_height_plus = 0;
		if (date_of_birth != null && !date_of_birth.isEmpty()) {
			double birth_weight = child.getBirth_weight();
			double birth_height = child.getBirth_height();
			
			if (birth_weight != 0) {
				child_age_in_weeks_weight = new Number[visits.size() + 1];
				child_weight = new Number[visits.size() + 1];
				child_age_in_weeks_weight[0] = 0;
				child_weight[0] = birth_weight;
				birth_weight_plus = 1;
			} else {
				child_age_in_weeks_weight = new Number[visits.size()];
				child_weight = new Number[visits.size()];
			}
			
			if (birth_height != 0) {
				child_age_in_weeks_height = new Number[visits.size() + 1];
				child_height = new Number[visits.size() + 1];
				child_age_in_weeks_height[0] = 0;
				child_height[0] = birth_height;
				birth_height_plus = 1;
			} else {
				child_height = new Number[visits.size()];
				child_age_in_weeks_height = new Number[visits.size()];
			}
		} else {
			double birth_weight = child.getBirth_weight();
			double birth_height = child.getBirth_height();
			
			if (birth_weight != 0) {
				child_age_in_weeks_weight = new Number[1];
				child_weight = new Number[1];
				child_age_in_weeks_weight[0] = 0;
				child_weight[0] = Utilities.round(birth_weight, 2);
				birth_weight_plus = 1;
			} else {
				child_age_in_weeks_weight = new Number[0];
				child_weight = new Number[0];
			}
			
			if (birth_height != 0) {
				child_age_in_weeks_height = new Number[1];
				child_height = new Number[1];
				child_age_in_weeks_height[0] = 0;
				child_height[0] = Utilities.round(birth_height, 2);
				birth_height_plus = 1;
			} else {
				child_height = new Number[0];
				child_age_in_weeks_height = new Number[0];
			}
		}
		
		for (int i = 0; i < visits.size(); i++) {
			DetailedChildVisit visit = visits.get(i);
			String visit_date = visit.getVisit_date();
			double weight = visit.getWeight_in_pounds();
			double height = visit.getHeight_in_centimeters();
			double age_in_weeks = Utilities.convertMonthsToWeeks(Utilities.timeBetween(Utilities.formatDate(date_of_birth), Utilities.formatDate(visit_date)));
			child_age_in_weeks_weight[i + birth_weight_plus] = Utilities.round(age_in_weeks, 1);
			child_age_in_weeks_height[i + birth_height_plus] = Utilities.round(age_in_weeks, 1);
			child_weight[i + birth_weight_plus] = Utilities.round(weight, 2); //convert here
			child_height[i + birth_height_plus] = Utilities.round(height, 2); //convert here
		}
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.graph_menu_bar, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();
		if (id == android.R.id.home) {
			Intent i = new Intent(getApplication(), MainActivity.class);
			startActivity(i);
			return true;
		}
		if (id == R.id.action_addvisit) {
			Intent i = new Intent(getApplication(), AddNewChildVisitActivity.class);
			i.putExtra("child_id", child_id);
			startActivity(i);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	public class NewChildGraphDialog extends DialogFragment {
	
		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
		    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
		    // Get the layout inflater
		    LayoutInflater inflater = getActivity().getLayoutInflater();
		    
		    final View v = inflater.inflate(R.layout.fragment_graph_new_child_dialog, null);
	
		    // Inflate and set the layout for the dialog
		    // Pass null as the parent view because its going in the dialog layout
		    AlertDialog.Builder view = builder.setView(v);

			//Set stuff up
		    return builder.create();
		}
	}
	
	
	public static double calculate_weight_z_score(double weight, double age_weeks, int sex) {
		double[] x_value ={0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5, 24.5, 25.5, 26.5, 27.5, 28.5, 29.5, 30.5, 31.5, 32.5, 33.5, 34.5, 35.5, 36};
		
		//male weight in pounds
    	double[] male_weight_mean_data = {7.782686, 8.825247, 10.757401, 12.506451, 14.090463, 15.524432, 16.822035, 17.996042, 19.058397, 20.020237, 20.891892, 21.68292, 22.402131, 23.057581, 23.656747, 24.206332, 24.712596, 25.181096, 25.616967, 26.024818, 26.408837, 26.772751, 27.119975, 27.453509, 27.776042, 28.089999, 28.397497, 28.700409, 29.000411, 29.298914, 29.597174, 29.896316, 30.197244, 30.500751, 30.807477, 31.117995, 31.432746, 31.591786};
    	double[] male_weight_standard_deviations = {1.20887, 1.30063, 1.46927, 1.62106, 1.75863, 1.88371, 1.99759, 2.10128, 2.19572, 2.28173, 2.36011, 2.43162, 2.49698, 2.55689, 2.61202, 2.663, 2.71044, 2.75489, 2.7969, 2.83698, 2.87559, 2.91317, 2.95012, 2.98683, 3.0236, 3.06076, 3.09857, 3.13729, 3.17714, 3.2183, 3.26093, 3.3052, 3.3512, 3.39905, 3.44883, 3.50059, 3.55438, 3.58205};		
		//female weight in pounds
    	double[] female_weight_mean_data = {7.493845, 8.37203, 10.019415, 11.531345, 12.91887, 14.192307, 15.361322, 16.434971, 17.42171, 18.329437, 19.165509, 19.936775, 20.649593, 21.30986, 21.923041, 22.494173, 23.027951, 23.528616, 24.000135, 24.446104, 24.869872, 25.274416, 25.662492, 26.036635, 26.399071, 26.751851, 27.096783, 27.435564, 27.769627, 28.100295, 28.428692, 28.755854, 29.082664, 29.409871, 29.738136, 30.068032, 30.400045, 30.566933};
		double[] female_weight_standard_deviations = {1.07327, 1.16113, 1.32125, 1.46295, 1.58868, 1.7006, 1.8006, 1.89039, 1.97151, 2.04535, 2.11315, 2.17603, 2.235, 2.29094, 2.34464, 2.39682, 2.44808, 2.49895, 2.5499, 2.60133, 2.65357, 2.70689, 2.76154, 2.81769, 2.87549, 2.93504, 2.99642, 3.05968, 3.12482, 3.19186, 3.26075, 3.33149, 3.40399, 3.47821, 3.55407, 3.63148, 3.71037, 3.75034};
		
		double[] standard_deviations;
		double[] mean_data;
		if (sex <= 1) { //Defaults to girl
			standard_deviations = male_weight_standard_deviations;
			mean_data = male_weight_mean_data;
		} else if (sex == 2) {
			standard_deviations = female_weight_standard_deviations;
			mean_data = female_weight_mean_data;
		} else {
			return 99; //invalid result
		}
		
		double num_days_in_month = 30.4167;
		double months = (age_weeks * 7) / num_days_in_month;
		int index = (int)Math.floor(months + 0.49999999);
		double factor;
		if (months < 0.5) {
			factor = months * 2;
		} else {
			double new_num = months - 0.5;
			long iPart = (long)new_num;
			factor = new_num - iPart;
		}
		
		double sd_lower_num = standard_deviations[index];
		double sd_larger_num = standard_deviations[index + 1];
		
		double sd_difference = sd_larger_num - sd_lower_num;
		double sd_extra = sd_difference * factor;
		double sd = sd_lower_num + sd_extra;
		
		double mean_lower_num = mean_data[index];
		double mean_larger_num = mean_data[index + 1];
		
		double mean_difference = mean_larger_num - mean_lower_num;
		double mean_extra = mean_difference * factor;
		double mean = mean_lower_num + mean_extra;
		
		double z_score = (weight - mean) / sd;
		
		return z_score;
		
		
	}
	
	public static double calculate_height_z_score(double height, double age_weeks, int sex) {
		double[] x_value ={0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5, 24.5, 25.5, 26.5, 27.5, 28.5, 29.5, 30.5, 31.5, 32.5, 33.5, 34.5, 35.5};
		
		//male height in centimeters
		double[] male_height_mean_data = {49.98888, 52.69598, 56.62843, 59.60895, 62.077, 64.21686, 66.12531, 67.86018, 69.45908, 70.94804, 72.34586, 73.66665, 74.9213, 76.11838, 77.2648, 78.36622, 79.42734, 80.45209, 81.44384, 82.40544, 83.33938, 84.24783, 85.1327, 85.99565, 86.83818, 87.66161, 88.45247, 89.22326, 89.97549, 90.71041, 91.42908, 92.13242, 92.82127, 93.49638, 94.15847, 94.80823, 95.44637};
		double[] male_height_standard_deviations = {2.656725014236541, 2.5664985477304496, 2.503544709401027, 2.501004407791473, 2.52361248869609, 2.5589084187198243, 2.601272590516277, 2.647775076831393, 2.6967537669603505, 2.7471899310468726, 2.7984425486102484, 2.8500929306782576, 2.901846009055823, 2.953513176037026, 3.004954985288619, 3.0560751078604227, 3.106810871339537, 3.1571125504711706, 3.206954931088994, 3.2563145732429772, 3.305176623520067, 3.3535431743613295, 3.4014059269072625, 3.448766072879765, 3.4956331380727024, 3.5420076496678385, 3.5898145823218996, 3.634078058524114, 3.674790301277003, 3.711999495978349, 3.7458033058036087, 3.7763205623905693, 3.8037106388199846, 3.8281592976177556, 3.8498659093509144, 3.8690419126226456, 3.8859064672143813};
		
		//female height in centimeters
		double[] female_height_mean_data = {49.2864, 51.68358, 55.28613, 58.09382, 60.45981, 62.5367, 64.40633, 66.11842, 67.70574, 69.19124, 70.59164, 71.91962, 73.18501, 74.39564, 75.55785, 76.67686, 77.75701, 78.80198, 79.81492, 80.79852, 81.75512, 82.68679, 83.59532, 84.48233, 85.34924, 86.19732, 87.09026, 87.95714, 88.79602, 89.60551, 90.38477, 91.13342, 91.85154, 92.53964, 93.19854, 93.82945, 94.43382};
		double[] female_height_standard_deviations = {2.4870613029834696, 2.429097238627928, 2.404242870797675, 2.424064933265939, 2.4614640482650056, 2.5072197072244666, 2.557285729949861, 2.6096189425659215, 2.663086430191851, 2.7170249666227964, 2.771030655667209, 2.8248415800736235, 2.878302249861729, 2.9313052451852815, 2.9837878218756497, 3.0357088176324596, 3.0870485252870585, 3.13779304364398, 3.1879407979655974, 3.237497324985195, 3.2864706324024415, 3.334868155232764, 3.3827014426260815, 3.429985726520747, 3.476733294025174, 3.5229555708779836, 3.5840339927779796, 3.637872308158759, 3.685892787816266, 3.729272672511177, 3.76897977912965, 3.8057960117128733, 3.840349409706832, 3.8731319850965833, 3.9045386495657826, 3.934854019883145, 3.9643144118023366};
		
		double[] standard_deviations;
		double[] mean_data;
		if (sex <= 1) { //Defaults to girl
			standard_deviations = male_height_standard_deviations;
			mean_data = male_height_mean_data;
		} else if (sex == 2) {
			standard_deviations = female_height_standard_deviations;
			mean_data = female_height_mean_data;
		} else {
			return 99; //invalid result
		}
		
		double num_days_in_month = 30.4167;
		double months = (age_weeks * 7) / num_days_in_month;
		int index = (int)Math.floor(months + 0.49999999);
		double factor;
		if (months < 0.5) {
			factor = months * 2;
		} else {
			double new_num = months - 0.5;
			long iPart = (long)new_num;
			factor = new_num - iPart;
		}
		
		double sd_lower_num = standard_deviations[index];
		double sd_larger_num = standard_deviations[index + 1];
		
		double sd_difference = sd_larger_num - sd_lower_num;
		double sd_extra = sd_difference * factor;
		double sd = sd_lower_num + sd_extra;
		
		double mean_lower_num = mean_data[index];
		double mean_larger_num = mean_data[index + 1];
		
		double mean_difference = mean_larger_num - mean_lower_num;
		double mean_extra = mean_difference * factor;
		double mean = mean_lower_num + mean_extra;
		
		double z_score = (height - mean) / sd;
		
		return z_score;
		
		
	}
	
	public static double calculate_other_score() {
		return 0;
	}
	

	
	public static class GraphFragmentLeft extends Fragment {
		
		private static String child_id;

		public GraphFragmentLeft() {
			
		}
		
		public static GraphFragmentLeft newInstance(String child_id) {
			GraphFragmentLeft f = new GraphFragmentLeft();
			Bundle args =  new Bundle();
			args.putString("child_id", child_id);
			f.setArguments(args);
			return f;
		}
		
		
		@Override
		public void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			
			Bundle args = getArguments();
			this.child_id = args.getString("child_id");
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_graph_left, container,false);
			
			DetailedChild child = DetailedRecordsStore.get(getActivity()).getChild(child_id);
			int gender = child.getGender();
			String dob = child.getDob();
			ArrayList<DetailedChildVisit> child_visits = child.getChild_visits();
			
			ImageView image_field = (ImageView)rootView.findViewById(R.id.graph_child_image);
			
			TextView sex_field = (TextView)rootView.findViewById(R.id.graph_child_sex);
			if (gender == 1) {
				sex_field.setText("Male");
			} else if (gender == 2) {
				sex_field.setText("Female");
			} else if (gender == 0) {
				sex_field.setText("No sex");
			}
			
			if (dob != null && !dob.isEmpty()) {
				String formatted_dob = Utilities.formatDate(dob);
				TextView dob_field = (TextView)rootView.findViewById(R.id.graph_child_dob);
				dob_field.setText(formatted_dob);
			} else {
				TextView dob_field = (TextView)rootView.findViewById(R.id.graph_child_dob);
				dob_field.setText("DOB UNKNOWN");
			}
			
			DetailedChildVisit dcv = null;
			if (!child_visits.isEmpty()) 
				dcv = child_visits.get(child_visits.size() - 1);
			
			TextView visit_header_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_header);
			if (dcv == null) { 
				if (child_age_in_weeks_weight.length > 0 || child_age_in_weeks_height.length > 0) {
					visit_header_field.setText("Birth Visit (" + Utilities.formatDate(child.getDate_created()) + ")");
					TextView age_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_age);
					age_field.setText("Age: " + 0 + " weeks");
					if (child_age_in_weeks_weight.length > 0) {
						double weight = child_weight[0].doubleValue();
						TextView weight_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_weight);
						weight_field.setText("Weight: " + weight);
						double weight_z_score = Utilities.round(calculate_weight_z_score(weight, 0, gender), 2);
						TextView weight_z_score_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_weight_z_score);
						weight_z_score_field.setText("Weight z-score: " + weight_z_score);
						
					} 
					if (child_age_in_weeks_height.length > 0) {
						double height = child_height[0].doubleValue();
						TextView height_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_height);
						height_field.setText("Height: " + height);
						double height_z_score = Utilities.round(calculate_height_z_score(height, 0, gender), 2);
						TextView height_z_score_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_height_z_score);
						height_z_score_field.setText("Height z-score: " + height_z_score);
					}
					
				} else {
					visit_header_field.setText("No Visits Logged");
				}
			} else {
				String visit_date = dcv.getVisit_date();
				String formatted_visit_date = Utilities.formatDate(visit_date);
				double age = child_age_in_weeks_weight[child_age_in_weeks_weight.length - 1].doubleValue(); //Weeks?
				
				double weight = child_weight[child_weight.length -1].doubleValue();
				double height = child_height[child_height.length - 1].doubleValue();
				double weight_z_score = Utilities.round(calculate_weight_z_score(weight, age, gender), 2);
				double height_z_score = Utilities.round(calculate_height_z_score(height, age, gender), 2);
				
				
				visit_header_field.setText("Child Visit (" + formatted_visit_date + ")"); //Format visit date
				
				TextView age_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_age);
				age_field.setText("Age: " + age + " weeks");
				
				TextView weight_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_weight);
				weight_field.setText("Weight: " + weight);
				
				TextView height_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_height);
				height_field.setText("Height: " + height);
							
				TextView weight_z_score_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_weight_z_score);
				weight_z_score_field.setText("Weight z-score: " + weight_z_score);
				
				TextView height_z_score_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_height_z_score);
				height_z_score_field.setText("Height z-score: " + height_z_score);

				TextView other_score_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_other_score);
				
				TextView recommendation_field = (TextView)rootView.findViewById(R.id.graph_child_reccomendation_info);
				//Assign variables
			}
			
			return rootView;
		}
	}
	
	public static double convertMonthsToWeeks(double months) {
		double days_in_month = 30.4167;
		
		return (months * days_in_month) / 7;
	}
	
	public static class GraphFragmentRight extends Fragment {
		
		int selected;
		int sex;
		
		public GraphFragmentRight() {
			selected = 1;
		}
		
		public static GraphFragmentRight newInstance(String child_id) {
			GraphFragmentRight f = new GraphFragmentRight();
			
			Bundle args =  new Bundle();
			args.putString("child_id", child_id);
			f.setArguments(args);
			return f;
		}
		
		@Override
		public void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			
			Bundle args = getArguments();
			String child_id = args.getString("child_id");
			DetailedChild child = DetailedRecordsStore.get(getActivity()).getChild(child_id);
			sex = child.getGender();
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
			final View rootView = inflater.inflate(R.layout.fragment_graph_right, container,false);
			final XYPlot plot = (XYPlot) rootView.findViewById(R.id.mySimpleXYPlot);
			CustomPointRenderer renderer = new CustomPointRenderer(plot);
			
			final TextView weight_view = (TextView)rootView.findViewById(R.id.tab_weight);
			final TextView height_view = (TextView)rootView.findViewById(R.id.tab_height);
			final TextView other_view = (TextView)rootView.findViewById(R.id.tab_other);
			
			weight_view.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {
					plot.clear();
					weight_view.setBackgroundResource(color.gray_medium);
					height_view.setBackgroundResource(color.gray_dark);
					other_view.setBackgroundResource(color.gray_dark);

					plot.setRangeLabel("Weight (pounds)");
					
					Number[][] data;
					Number[] x_values = x_weight_values_week;
					if (sex == 1) { //MALE
						plot.setTitle("Male Weight vs. Age");
						data = male_weight_data_pounds;
					} else { //Female
						plot.setTitle("Female Weight vs. Age");
						data = female_weight_data_pounds;
					}
					 
			        for (int i = 0; i < data_indices.length; i++) {
			        	Number[] row = data[data_indices[i]];
			        	XYSeries series = new SimpleXYSeries(Arrays.asList(x_values), Arrays.asList(row), "");
			        	LineAndPointFormatter seriesFormat = new LineAndPointFormatter(Color.RED, Color.GREEN, null, null);
						 
				        // add a new series' to the xyplot:
				        plot.addSeries(series, seriesFormat);
			        }
			        if (child_age_in_weeks_weight.length > 0) {
				        XYSeries series = new SimpleXYSeries(Arrays.asList(child_age_in_weeks_weight), Arrays.asList(child_weight), "Child");
				        LineAndPointFormatter seriesFormat = new LineAndPointFormatter(Color.BLUE, Color.YELLOW, null, null);
				        plot.addSeries(series, seriesFormat);
			        }
			        
			        
			        
			        
			        // reduce the number of range labels
			        plot.setTicksPerRangeLabel(3);
			        plot.getGraphWidget().setDomainLabelOrientation(-45);
					CustomPointRenderer renderer = new CustomPointRenderer(plot);
					renderer.setWidth(10);
					renderer.render(canvas, plotArea);
					plot.redraw();

				} 
			});
			height_view.setOnClickListener(new View.OnClickListener() {
			
				@Override
				public void onClick(View v) {
					plot.clear();
					height_view.setBackgroundResource(color.gray_medium);
					weight_view.setBackgroundResource(color.gray_dark);
					other_view.setBackgroundResource(color.gray_dark);

					plot.setRangeLabel("Height (centimeters)");
					

					Number[][] data;
					Number[] x_values = x_height_values_week;
					if (sex == 1) { //MALE
						plot.setTitle("Male Height vs. Age");
						data = male_height_data;
					} else { //Female
						plot.setTitle("Female height vs. Age");
						data = female_height_data;
					}
					 
			        // Create a couple arrays of y-values to plot:
					for (int i = 0; i < data_indices.length; i++) {
			        	Number[] row = data[data_indices[i]];
			        	XYSeries series = new SimpleXYSeries(Arrays.asList(x_values), Arrays.asList(row), "Name");
			        	LineAndPointFormatter seriesFormat = new LineAndPointFormatter(Color.RED, Color.GREEN, null, null);
						 
				        // add a new series' to the xyplot:
				        plot.addSeries(series, seriesFormat);
			        }
					if (child_age_in_weeks_height.length > 0) {
						XYSeries series = new SimpleXYSeries(Arrays.asList(child_age_in_weeks_height), Arrays.asList(child_height), "Child");
				        LineAndPointFormatter seriesFormat = new LineAndPointFormatter(Color.BLUE, Color.YELLOW, null, null);
				        plot.addSeries(series, seriesFormat);
					}
					
			     // reduce the number of range labels
			        plot.setTicksPerRangeLabel(3);
			        plot.getGraphWidget().setDomainLabelOrientation(-45);
					plot.redraw();
				}
			});
		
			other_view.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {

					other_view.setBackgroundResource(color.gray_medium);
					height_view.setBackgroundResource(color.gray_dark);
					weight_view.setBackgroundResource(color.gray_dark);
				}
			});
		
		
			if (selected == 1) weight_view.performClick();
			else if (selected == 2) height_view.performClick();
			else if (selected == 3) other_view.performClick();
			
			return rootView;
		}	
		
	}
}


