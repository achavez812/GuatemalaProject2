package com.stanford.guatemedic;

import java.math.BigDecimal;
import java.math.RoundingMode;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.support.v7.app.ActionBarActivity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.stanford.guatemedic.R.color;

public class GraphActivity extends ActionBarActivity {
	
	//static String date_of_birth;
	static String sex = null;
	//static String visit_date;
	static int age_weeks = -1;
	static double weight = -1;
	static double height = -1;
	

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_graph);
		getActionBar().setHomeButtonEnabled(true);
		if (savedInstanceState == null) {
			getSupportFragmentManager().beginTransaction().add(R.id.left_content, new GraphFragmentLeft()).commit();
			getSupportFragmentManager().beginTransaction().add(R.id.right_content, new GraphFragmentRight()).commit();
		}
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.graph_menu_bar, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();
		if (id == android.R.id.home) {
			Intent i = new Intent(getApplication(), MainActivity.class);
			startActivity(i);
		}
		if (id == R.id.action_newchild) {
			NewChildGraphDialog ncgd = new NewChildGraphDialog();
			ncgd.show(getSupportFragmentManager(), null);
			return false;
		}
		if (id == R.id.action_addvisit) {
			AddVisitGraphDialog avgd = new AddVisitGraphDialog();
			avgd.show(getSupportFragmentManager(), null);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	public class NewChildGraphDialog extends DialogFragment {
	
		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
		    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
		    // Get the layout inflater
		    LayoutInflater inflater = getActivity().getLayoutInflater();
		    
		    final View v = inflater.inflate(R.layout.fragment_graph_new_child_dialog, null);
	
		    // Inflate and set the layout for the dialog
		    // Pass null as the parent view because its going in the dialog layout
		    AlertDialog.Builder view = builder.setView(v);
		    /*
		    String[] month_array = new String[12];
		    for (int i = 1; i <= 12; i++) month_array[i-1] = "" + i;
		    final Spinner month_spinner = (Spinner)v.findViewById(R.id.graph_new_child_month_spinner);
			ArrayAdapter<CharSequence> month_adapter = new ArrayAdapter<CharSequence>(getActivity(), android.R.layout.simple_spinner_item, month_array);
			month_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			month_spinner.setAdapter(month_adapter);
			
			String[] day_array = new String[31];
			for (int i = 1; i <= 31; i++) day_array[i-1] = "" + i;
			final Spinner day_spinner = (Spinner)v.findViewById(R.id.graph_new_child_day_spinner);
			ArrayAdapter<CharSequence> day_adapter = new ArrayAdapter<CharSequence>(getActivity(), android.R.layout.simple_spinner_item, day_array);
			day_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			day_spinner.setAdapter(day_adapter);
			
			String[] year_array = new String[11];
			for (int i = 2004; i <= 2014; i++) year_array[i-2004] = "" + i;
			final Spinner year_spinner = (Spinner)v.findViewById(R.id.graph_new_child_year_spinner);
			ArrayAdapter<CharSequence> year_adapter = new ArrayAdapter<CharSequence>(getActivity(), android.R.layout.simple_spinner_item, year_array);
			year_adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			year_spinner.setAdapter(year_adapter);
			*/
			final RadioGroup sex_radio = (RadioGroup)v.findViewById(R.id.sex_radio);
			
		    // Add action buttons
           view.setPositiveButton("Add New Child", new DialogInterface.OnClickListener() {
               @Override
               public void onClick(DialogInterface dialog, int id) {
            	   /*
                   String month = month_spinner.getSelectedItem().toString();
                   String day = day_spinner.getSelectedItem().toString();
                   String year = year_spinner.getSelectedItem().toString();
                   if (month.length() == 1) month = 0 + month;
                   if (day.length() == 1) day = 0 + day;
                   date_of_birth = month + "/" + day + "/" + year;
                   */
                   sex = ((RadioButton)v.findViewById(sex_radio.getCheckedRadioButtonId())).getText().toString();
                   age_weeks = -1;
                   weight = -1;
                   height = -1;
                   
                   getSupportFragmentManager().beginTransaction().replace(R.id.left_content, new GraphFragmentLeft()).commit();
               }
           });
           view.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
               public void onClick(DialogInterface dialog, int id) {
                   NewChildGraphDialog.this.getDialog().cancel();
               }
           });      
		    return builder.create();
		}
	}
	
	public class AddVisitGraphDialog extends DialogFragment {
		
		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
		    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
		    // Get the layout inflater
		    LayoutInflater inflater = getActivity().getLayoutInflater();
		    
		    final View v = inflater.inflate(R.layout.fragment_graph_add_visit_dialog, null);
	
		    // Inflate and set the layout for the dialog
		    // Pass null as the parent view because its going in the dialog layout
		    AlertDialog.Builder view = builder.setView(v);
		    
		    final EditText age_field = (EditText)v.findViewById(R.id.graph_add_visit_weeks_age);
		    final EditText weight_field = (EditText)v.findViewById(R.id.graph_add_visit_weight);
		    final EditText height_field = (EditText)v.findViewById(R.id.graph_add_visit_height);
		    
		    // Add action buttons
           view.setPositiveButton("Add New Visit", new DialogInterface.OnClickListener() {
               @Override
               public void onClick(DialogInterface dialog, int id) {
            	   age_weeks = Integer.parseInt(age_field.getText().toString());
            	   weight = Double.parseDouble(weight_field.getText().toString());
            	   height = Double.parseDouble(height_field.getText().toString());
            	   getSupportFragmentManager().beginTransaction().replace(R.id.left_content, new GraphFragmentLeft()).commit();
               }
           });
           view.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
               public void onClick(DialogInterface dialog, int id) {
            	   AddVisitGraphDialog.this.getDialog().cancel();
               }
           });      
		    return builder.create();
		}
	}
	
	public static double calculate_weight_z_score() {
		double[] x_value ={0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5, 24.5, 25.5, 26.5, 27.5, 28.5, 29.5, 30.5, 31.5, 32.5, 33.5, 34.5, 35.5, 36};
		//male weight in kilograms
		double[][] male_weight_data = {
			{2.355451, 2.799549, 3.614688, 4.342341, 4.992898, 5.575169, 6.096775, 6.56443, 6.984123, 7.361236, 7.700624, 8.006677, 8.283365, 8.534275, 8.762649, 8.971407, 9.16318, 9.340328, 9.504964, 9.658975, 9.804039, 9.941645, 10.07311, 10.19957, 10.32206, 10.44144, 10.55847, 10.6738, 10.78798, 10.90147, 11.01466, 11.12787, 11.24135, 11.3553, 11.46988, 11.58521, 11.70137, 11.75978},
			{2.526904, 2.964656, 3.774849, 4.503255, 5.157412, 5.744752, 6.272175, 6.745993, 7.171952, 7.555287, 7.900755, 8.212684, 8.495, 8.751264, 8.984701, 9.198222, 9.394454, 9.575757, 9.744251, 9.90183, 10.05019, 10.19082, 10.32507, 10.4541, 10.57895, 10.70051, 10.81958, 10.93681, 11.0528, 11.16803, 11.28293, 11.39782, 11.513, 11.62869, 11.74508, 11.8623, 11.98046, 12.03991},
			{2.773802, 3.20951, 4.020561, 4.754479, 5.416803, 6.013716, 6.551379, 7.035656, 7.472021, 7.865533, 8.220839, 8.542195, 8.833486, 9.098246, 9.339688, 9.560722, 9.763982, 9.95184, 10.12643, 10.28968, 10.4433, 10.58881, 10.72759, 10.86084, 10.98963, 11.1149, 11.23747, 11.35806, 11.47728, 11.59567, 11.71368, 11.8317, 11.95005, 12.069, 12.18875, 12.30948, 12.43132, 12.49268},
			{3.150611, 3.597396, 4.428873, 5.183378, 5.866806, 6.484969, 7.043627, 7.548346, 8.004399, 8.416719, 8.789882, 9.12811, 9.435279, 9.714942, 9.970338, 10.20442, 10.41986, 10.6191, 10.80433, 10.97753, 11.14047, 11.29477, 11.44185, 11.58298, 11.7193, 11.85182, 11.98142, 12.10889, 12.23491, 12.36007, 12.4849, 12.60983, 12.73523, 12.86144, 12.9887, 13.11723, 13.24721, 13.31278},
			{3.530203, 4.003106, 4.879525, 5.672889, 6.391392, 7.041836, 7.630425, 8.162951, 8.644832, 9.08112, 9.4765, 9.835308, 10.16154, 10.45885, 10.73063, 10.97992, 11.20956, 11.42207, 11.61978, 11.80478, 11.97897, 12.14404, 12.30154, 12.45283, 12.59913, 12.74154, 12.88102, 13.01842, 13.1545, 13.2899, 13.42519, 13.56088, 13.69738, 13.83505, 13.97418, 14.11503, 14.2578, 14.32994},
			{3.879077, 4.387423, 5.327328, 6.175598, 6.942217, 7.635323, 8.262033, 8.828786, 9.34149, 9.805593, 10.22612, 10.60772, 10.95466, 11.27087, 11.55996, 11.82524, 12.06973, 12.29617, 12.50708, 12.70473, 12.89117, 13.06825, 13.23765, 13.40086, 13.5592, 13.71386, 13.8659, 14.01623, 14.16567, 14.31493, 14.46462, 14.61527, 14.76732, 14.92117, 15.07711, 15.23541, 15.39628, 15.47772},
			{4.172493, 4.718161, 5.728153, 6.638979, 7.460702, 8.202193, 8.871384, 9.475466, 10.02101, 10.51406, 10.96017, 11.36445, 11.7316, 12.06595, 12.37145, 12.65175, 12.91015, 13.14969, 13.37311, 13.5829, 13.78133, 13.97042, 14.15201, 14.32772, 14.499, 14.66716, 14.83332, 14.99848, 15.16351, 15.32917, 15.4961, 15.66485, 15.83588, 16.00958, 16.18624, 16.36612, 16.5494, 16.64237},
			{4.340293, 4.91013, 5.967102, 6.921119, 7.781401, 8.556813, 9.255615, 9.885436, 10.45331, 10.96574, 11.42868, 11.84763, 12.22766, 12.5734, 12.88911, 13.17867, 13.44564, 13.69325, 13.92444, 14.14187, 14.34795, 14.54484, 14.73448, 14.91861, 15.09876, 15.2763, 15.45242, 15.62819, 15.8045, 15.98214, 16.16177, 16.34395, 16.52915, 16.71773, 16.91, 17.10619, 17.30646, 17.40816},
			{4.446488, 5.032625, 6.121929, 7.10625, 7.993878, 8.793444, 9.513307, 10.16135, 10.74492, 11.27084, 11.74538, 12.17436, 12.56308, 12.91645, 13.23893, 13.53462, 13.80724, 14.06019, 14.29655, 14.51909, 14.73034, 14.93256, 15.12777, 15.31777, 15.50418, 15.68841, 15.8717, 16.05514, 16.23967, 16.42609, 16.61508, 16.8072, 17.00291, 17.2026, 17.40654, 17.61495, 17.82797, 17.93625}
		};
		double[] male_weight_mean_data = male_weight_data[male_weight_data.length / 2];
		
		//female weight in kilograms
		double[][] female_weight_data = {
			{2.414112, 2.756917, 3.402293, 3.997806, 4.547383, 5.054539, 5.5225, 5.954272, 6.352668, 6.720328, 7.059732, 7.373212, 7.662959, 7.93103, 8.179356, 8.409744, 8.623887, 8.82337, 9.009668, 9.18416, 9.348127, 9.50276, 9.649162, 9.788355, 9.921281, 10.04881, 10.17173, 10.29079, 10.40664, 10.5199, 10.63112, 10.74078, 10.84935, 10.95722, 11.06475, 11.17225, 11.28, 11.33404},
			{2.547905, 2.894442, 3.54761, 4.150639, 4.707123, 5.220488, 5.693974, 6.130641, 6.533373, 6.904886, 7.247736, 7.564327, 7.856916, 8.127621, 8.378425, 8.611186, 8.827638, 9.029399, 9.21798, 9.394782, 9.56111, 9.71817, 9.867081, 10.00887, 10.1445, 10.27483, 10.40066, 10.52274, 10.64171, 10.75819, 10.87273, 10.98581, 11.09789, 11.20934, 11.32054, 11.43177, 11.54332, 11.59929},
			{2.747222, 3.101767, 3.770157, 4.387042, 4.955926, 5.480295, 5.96351, 6.408775, 6.819122, 7.197414, 7.546342, 7.868436, 8.166069, 8.44146, 8.696684, 8.93368, 9.154251, 9.360079, 9.552723, 9.73363, 9.90414, 10.06549, 10.21882, 10.36518, 10.50553, 10.64076, 10.77167, 10.89899, 11.02338, 11.14545, 11.26575, 11.38474, 11.50288, 11.62054, 11.73806, 11.85574, 11.97384, 12.03312},
			{3.064865, 3.437628, 4.138994, 4.78482, 5.379141, 5.925888, 6.428828, 6.891533, 7.317373, 7.709516, 8.070932, 8.4044, 8.712513, 8.997692, 9.262185, 9.508085, 9.737329, 9.951715, 10.1529, 10.34241, 10.52167, 10.69196, 10.85446, 11.01027, 11.16037, 11.30567, 11.44697, 11.58501, 11.72047, 11.85392, 11.98592, 12.11692, 12.24735, 12.37757, 12.50791, 12.63865, 12.77001, 12.836},
			{3.399186, 3.797528, 4.544777, 5.230584, 5.859961, 6.437588, 6.96785, 7.454854, 7.902436, 8.314178, 8.693418, 9.043262, 9.366594, 9.666089, 9.944226, 10.20329, 10.44541, 10.67251, 10.88639, 11.08868, 11.2809, 11.4644, 11.64043, 11.81014, 11.97454, 12.13456, 12.29102, 12.44469, 12.59622, 12.74621, 12.89517, 13.04357, 13.19181, 13.34023, 13.48913, 13.63877, 13.78937, 13.86507},
			{3.717519, 4.145594, 4.946766, 5.680083, 6.351512, 6.966524, 7.53018, 8.047178, 8.521877, 8.958324, 9.360271, 9.731193, 10.07431, 10.39258, 10.68874, 10.96532, 11.22463, 11.46878, 11.69972, 11.91921, 12.12887, 12.33016, 12.52439, 12.71277, 12.89636, 13.07613, 13.25293, 13.42753, 13.60059, 13.77271, 13.9444, 14.11611, 14.28822, 14.46106, 14.63491, 14.80998, 14.98647, 15.07529},
			{3.992572, 4.450126, 5.305632, 6.087641, 6.80277, 7.457119, 8.056331, 8.605636, 9.109878, 9.573546, 10.00079, 10.39545, 10.76106, 11.10089, 11.41792, 11.71491, 11.99438, 12.25862, 12.50974, 12.74964, 12.98004, 13.2025, 13.41844, 13.62911, 13.83564, 14.03902, 14.24017, 14.43984, 14.63873, 14.83743, 15.03646, 15.23626, 15.43719, 15.63957, 15.84365, 16.04963, 16.25767, 16.3625},
			{4.152637, 4.628836, 5.519169, 6.332837, 7.076723, 7.757234, 8.38033, 8.951544, 9.476009, 9.95848, 10.40335, 10.8147, 11.19625, 11.55145, 11.88348, 12.19522, 12.48934, 12.76825, 13.03415, 13.28904, 13.53473, 13.77284, 14.00484, 14.23205, 14.45561, 14.67659, 14.89587, 15.11428, 15.33249, 15.55113, 15.7707, 15.99164, 16.21432, 16.43904, 16.66605, 16.89553, 17.12762, 17.24469},
			{4.254922, 4.743582, 5.657379, 6.492574, 7.256166, 7.95473, 8.594413, 9.180938, 9.719621, 10.21539, 10.6728, 11.09607, 11.48908, 11.85539, 12.19829, 12.52078, 12.82561, 13.11527, 13.39204, 13.65799, 13.91497, 14.16467, 14.40858, 14.64807, 14.88432, 15.11839, 15.35122, 15.58363, 15.81632, 16.0499, 16.28491, 16.52176, 16.76085, 17.00245, 17.24681, 17.49412, 17.7445, 17.87089}	
		};
		double[] female_weight_mean_data = female_weight_data[female_weight_data.length / 2];
		
		double[][] data;
		double[] mean_data;
		if (sex.equals("Male")) {
			data = male_weight_data;
			mean_data = male_weight_mean_data;
		} else if (sex.equals("Female")) {
			data = female_weight_data;
			mean_data = female_weight_mean_data;
		} else {
			return 99; //invalid result
		}
		
		
	}
	
	public static double calculate_height_z_score() {
		double[] x_value ={0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5, 19.5, 20.5, 21.5, 22.5, 23.5, 24.5, 25.5, 26.5, 27.5, 28.5, 29.5, 30.5, 31.5, 32.5, 33.5, 34.5, 35.5, 36};
		
		//male height in centimeters
		double[] male_height_mean_data = {49.98888, 52.69598, 56.62843, 59.60895, 62.077, 64.21686, 66.12531, 67.86018, 69.45908, 70.94804, 72.34586, 73.66665, 74.9213, 76.11838, 77.2648, 78.36622, 79.42734, 80.45209, 81.44384, 82.40544, 83.33938, 84.24783, 85.1327, 85.99565, 86.83818, 87.66161, 88.45247, 89.22326, 89.97549, 90.71041, 91.42908, 92.13242, 92.82127, 93.49638, 94.15847, 94.80823, 95.44637};
		double[] male_height_standard_deviations;
		
		//female height in centimeters
		double[] female_height_mean_data = {49.2864, 51.68358, 55.28613, 58.09382, 60.45981, 62.5367, 64.40633, 66.11842, 67.70574, 69.19124, 70.59164, 71.91962, 73.18501, 74.39564, 75.55785, 76.67686, 77.75701, 78.80198, 79.81492, 80.79852, 81.75512, 82.68679, 83.59532, 84.48233, 85.34924, 86.19732, 87.09026, 87.95714, 88.79602, 89.60551, 90.38477, 91.13342, 91.85154, 92.53964, 93.19854, 93.82945, 94.43382}
		double[] female_height_standard_deviations;
		
		double[] standard_deviations;
		double[] mean_data;
		if (sex.equals("Male")) {
			standard_deviations = male_height_standard_deviations;
			mean_data = male_height_mean_data;
		} else if (sex.equals("Female")) {
			standard_deviations = female_height_standard_deviations;
			mean_data = female_height_mean_data;
		} else {
			return 99; //invalid result
		}
		
		
	}
	
	public static double calculate_bmi_z_score() {
		
	}
	
	public static double round(double value, int places) {
	    if (places < 0) throw new IllegalArgumentException();

	    BigDecimal bd = new BigDecimal(value);
	    bd = bd.setScale(places, RoundingMode.HALF_UP);
	    return bd.doubleValue();
	}
	
	public static class GraphFragmentLeft extends Fragment {

		public GraphFragmentLeft() {
			
		}
		
		@Override
		public void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_graph_left, container,false);
			
			TextView sex_field = (TextView)rootView.findViewById(R.id.graph_child_sex);
			
			TextView age_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_age);
			
			TextView weight_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_weight);
			
			TextView height_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_height);
			
			TextView bmi_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_bmi);
			
			TextView weight_z_score_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_weight_z_score);
			
			TextView height_z_score_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_height_z_score);
			
			TextView bmi_z_score_field = (TextView)rootView.findViewById(R.id.graph_last_child_visit_bmi_z_score);
			
			TextView recommendation_field = (TextView)rootView.findViewById(R.id.graph_child_reccomendation_info);
			
			if (sex == null) { //No child (therefore no visit either)
				
			} else if (age_weeks == -1) { //No visit
				sex_field.setText("Sex: " + sex);
			} else { //It's good
				sex_field.setText("Sex: " + sex);
				age_field.setText("Age: " + age_weeks + " weeks");
				weight_field.setText("Weight: " + round(weight, 2) + " kg");
				height_field.setText("Height: " + round(height, 2) + " cm");
				double bmi = weight / Math.pow((height/100), 2);
				bmi_field.setText("BMI: " + round(bmi, 2));
				double weight_z_score = calculate_weight_z_score();
				double height_z_score = calculate_height_z_score();
				double bmi_z_score = calculate_bmi_z_score();
			}
			
			return rootView;
		}
	}
	
	public static class GraphFragmentRight extends Fragment {
		
		//1 = weight
		//2 = height
		//3 = bmi
		int selected;
		
		public GraphFragmentRight() {
			selected = 1;
		}
		
		@Override
		public void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_graph_right, container,false);
			
			final TextView weight_view = (TextView)rootView.findViewById(R.id.tab_weight);
			final TextView height_view = (TextView)rootView.findViewById(R.id.tab_height);
			final TextView bmi_view = (TextView)rootView.findViewById(R.id.tab_bmi);
			
			weight_view.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {

					weight_view.setBackgroundResource(color.gray_medium);
					height_view.setBackgroundResource(color.gray_dark);
					bmi_view.setBackgroundResource(color.gray_dark);
					
				}
			});
			
			
			height_view.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {
					
					height_view.setBackgroundResource(color.gray_medium);
					weight_view.setBackgroundResource(color.gray_dark);
					bmi_view.setBackgroundResource(color.gray_dark);
				}
			});
			
			
			bmi_view.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {

					bmi_view.setBackgroundResource(color.gray_medium);
					height_view.setBackgroundResource(color.gray_dark);
					weight_view.setBackgroundResource(color.gray_dark);
				}
			});
			
			if (selected == 1) weight_view.performClick();
			else if (selected == 2) height_view.performClick();
			else if (selected == 3) bmi_view.performClick();
			
			return rootView;
		}
	}

}
