package com.example.guatemedic;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import android.annotation.SuppressLint;
import android.content.Context;
import android.util.Log;


@SuppressLint("SimpleDateFormat")
public class DetailedRecordsStore {
		
	//DECLARE DATA STRUCTURES
	private ArrayList<Village> mVillages;
	private Map<String, ArrayList<DetailedFamily>> mFamilies;
	private Map<Integer, ArrayList<DetailedChild>> mChildren;
	
	private static DetailedRecordsStore sDetailedRecordsStore;
	private Context mAppContext;
	
	private DetailedRecordsStore(Context appContext) {
		mAppContext = appContext;
		//INITIALIZE DATA STRUCTURES
		mVillages = new ArrayList<Village>();
		mFamilies = new HashMap<String, ArrayList<DetailedFamily>>(); //The String key is the village name
		mChildren = new HashMap<Integer, ArrayList<DetailedChild>>(); //The Integer key is the family id
		processData();

	}
	
	public static DetailedRecordsStore get(Context c) {
		if (sDetailedRecordsStore == null) {
			sDetailedRecordsStore = new DetailedRecordsStore(c.getApplicationContext());
		} 
		return sDetailedRecordsStore;
	}
	
	public ArrayList<Village> getVillages() {
		return mVillages;
	}
	
	public Village getVillage(String villageName) {
		for (Village v : mVillages) {
			if (v.getName().equals(villageName))
				return v;
		}
		return null;
	}
	
	public ArrayList<DetailedFamily> getFamilies(String villageName) {
		return mFamilies.get(villageName);
	}
	
	
	public DetailedFamily getFamily(int familyId) {
		for (String key : mFamilies.keySet()) {
			for (DetailedFamily f : mFamilies.get(key)) {
				if (f.getId() == familyId) 
					return f;
			}
		}
		return null;
	}
	
	//Faster search
	public DetailedFamily getFamily(String villageName, int familyId) {
		for (DetailedFamily f : mFamilies.get(villageName)) {
			if (f.getId() == familyId)
				return f;
		}
		return null;
	}
	
	public ArrayList<DetailedChild> getChildren(int familyId) {
		return mChildren.get(familyId);
	}
	
	public DetailedChild getChild(int childId) {
		for (Integer key : mChildren.keySet()) {
			for (DetailedChild c : mChildren.get(key)) {
				if (c.getId() == childId) {
					return c;
				}
			}
		}
		return null;
	}
	
	//Faster search
	public DetailedChild getChild(int familyId, int childId) {
		for (DetailedChild c : mChildren.get(familyId)) {
			if (c.getId() == childId)
				return c;
		}
		return null;
	}
	
	//Faster search
	public DetailedChild getChild(String villageName, int childId) {
		for (DetailedFamily f : mFamilies.get(villageName)) {
			for (DetailedChild c : mChildren.get(f.getId())) {
				if (c.getId() == childId)
					return c;
			}
		}
		return null;
	}
	
	private int[] convertArray(String[] arr) {
		int[] newArr = new int[arr.length];
		for (int i = 0; i < arr.length; i++)
			newArr[i] = Integer.parseInt(arr[i]);
		return newArr;
	}
	
	private String readFromFile(String filename) {
		try {
			FileInputStream fis = mAppContext.openFileInput(filename);
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			int bytesRead = 0;
			byte[] buffer = new byte[1024];
			while ((bytesRead = fis.read(buffer)) > 0) {
				out.write(buffer, 0 , bytesRead);
			}
			String str =  new String(out.toByteArray());
			out.close();
			fis.close();
			return str;
		} catch (IOException e) {
			
		}
		return null;
	}
	
	private void parseChildVisits(int familyId, int childId, JSONArray childVisits) {
		DetailedChild c = getChild(familyId, childId);
		ArrayList<ChildVisit> theArray = new ArrayList<ChildVisit>();
		c.setChildVisits(theArray);
		for (int i = 0; i < childVisits.length(); i++) {
			try {
				JSONObject obj = childVisits.getJSONObject(i);
				ChildVisit cv = new ChildVisit();
				theArray.add(cv);
				
				cv.setChild_id(childId);
				cv.setVisit_date(obj.getString("visit_date"));
				
				
				if (obj.has("vaccinated")) //UPDATE THIS
					cv.setNewVaccinations(obj.getString("vaccinated"));
				if (obj.has("fed_only_by_breast"))
					cv.setFed_only_by_breast(1 == Integer.parseInt(obj.getString("fed_only_by_breast")));
				if (obj.has("currently_fed_supplementary_food"))
					cv.setCurrently_fed_supplementary_food(1 == Integer.parseInt(obj.getString("currently_fed_supplementary_food")));
				if (obj.has("num_siblings_older_than_5"))
					cv.setNum_sibilings_older_than_5(Integer.parseInt(obj.getString("num_siblings_older_than_5")));
				if (obj.has("new_child"))  //WHAT IS THIS????
					cv.setNew_child(1 == Integer.parseInt(obj.getString("new_child")));
				if (obj.has("weight_in_kilos"))
					cv.setWeight_in_kilos(Double.parseDouble(obj.getString("weight_in_kilos")));
				if (obj.has("height_in_centimeters"))
					cv.setHeight_in_centimeters(Double.parseDouble(obj.getString("height_in_centimeters")));
				if (obj.has("currently_breastfed"))
					cv.setCurrently_breastfed(1 == Integer.parseInt(obj.getString("currently_breastfed")));
				if (obj.has("receiving_nutritional_supplement"))
					cv.setReceiving_nutritional_supplement(1 == Integer.parseInt(obj.getString("receiving_nutritional_supplement")));
				if (obj.has("num_times_vegetables_past_week"))
					cv.setNum_times_vegetables_past_week(Integer.parseInt(obj.getString("num_times_vegetables_past_week")));
				if (obj.has("num_times_herbs_past_week"))
					cv.setNum_times_herbs_past_week(Integer.parseInt(obj.getString("num_times_herbs_past_week")));
				if (obj.has("num_times_diarrhea_past_week"))
					cv.setNum_times_diarrhea_past_week(Integer.parseInt(obj.getString("num_times_diarrhea_past_week")));
				if (obj.has("num_times_vomit_past_week"))
					cv.setNum_times_vomit_past_week(Integer.parseInt(obj.getString("num_times_vomit_past_week")));
				if (obj.has("num_times_cough_past_week"))
					cv.setNum_times_cough_past_week(Integer.parseInt(obj.getString("num_times_cough_past_week")));
				if (obj.has("num_times_fever_past_week"))
					cv.setNum_times_fever_past_week(Integer.parseInt(obj.getString("num_times_fever_past_week")));
				if (obj.has("other_illness")) //FIGURE THIS OUT
					cv.setOther_illness(obj.getString("other_illness"));
				if (obj.has("illness_description")) //THIS COULD BE USED AS GENERAL NOTES
					cv.setIllness_description("illness_description");
				if (obj.has("other_medicine_provided"))
					cv.setOther_medicine_provided(obj.getString("other_medicine_provided"));
				if (obj.has("malnutrition_grade_guatemala_scale"))
					cv.setMalnutrition_grade_guatemala_scale(Double.parseDouble(obj.getString("malnutrition_grade_guatemala_scale")));
				if (obj.has("malnutrition_grade_world_scale"))
					cv.setMalnutrition_grade_world_scale(Double.parseDouble(obj.getString("malnutrition_grade_world_scale")));
				if (obj.has("malnutrition_grade_height_for_age"))
					cv.setMalnutrition_grade_height_for_age(Double.parseDouble(obj.getString("malnutrition_grade_height_for_age")));
				if (obj.has("receiving_supplements"))
					cv.setReceiving_supplements(1 == Integer.parseInt(obj.getString("receiving_supplements")));
				if (obj.has("why_receiving_supplements"))
					cv.setWhy_receiving_supplements(obj.getString("why_receiving_supplements"));
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
			
		
	}
	
	private void parseChildren(String villageName, int familyId, JSONArray children) {
		ArrayList<DetailedChild> theArray = new ArrayList<DetailedChild>();
		mChildren.put(familyId, theArray);
		for (int i = 0; i < children.length(); i++) {
			Log.i("WTF", "Processing Child");
			try {
				JSONObject obj = children.getJSONObject(i);
				DetailedChild c = new DetailedChild();
				theArray.add(c);
				
				int childId = Integer.parseInt(obj.getString("child_id"));
				c.setId(childId);
				c.setFamilyId(familyId);
				
				parseChildVisits(familyId, childId, obj.getJSONArray("visits"));
				
				if (obj.has("first_name"))
					c.setFirst_name(obj.getString("first_name"));
				if (obj.has("middle_name"))
					c.setMiddle_name(obj.getString("middle_name"));
				if (obj.has("last_name"))
					c.setLast_name(obj.getString("last_name"));
				if (obj.has("gender"))
					c.setGender(obj.getString("gender"));
				if (obj.has("dob"))
					c.setDate_of_birth(obj.getString("dob"));
				if (obj.has("type_of_birth"))
					c.setType_of_birth(obj.getString("type_of_birth"));
				if (obj.has("months_gestated"))
					c.setMonths_gestated(Double.parseDouble(obj.getString("months_gestated")));
				if (obj.has("prenatal_control")) 
					c.setPrenatal_control(obj.getString("prenatal_control"));
				if (obj.has("birth_weight"))
					c.setBirth_weight(Double.parseDouble(obj.getString("birth_weight")));
				if (obj.has("z_score"))
					c.setZ_score(Double.parseDouble(obj.getString("z_score")));
				
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		
	}
	
	private void parseFamilyVisits(String villageName, int family_id, JSONArray familyVisits) {
		DetailedFamily f = getFamily(villageName, family_id);
		ArrayList<FamilyVisit> theFamilyVisits = new ArrayList<FamilyVisit>();
		for (int i = 0; i < familyVisits.length(); i++) {
			try {
				JSONObject obj = familyVisits.getJSONObject(i);
				FamilyVisit fv = new FamilyVisit();
				fv.setFamily_id(family_id);
				fv.setVisit_date(obj.getString("visit_date"));
				if (obj.has("father_lives_with"))
					fv.setFather_lives_with(obj.getString("father_lives_with"));
				if (obj.has("num_pregnancies_mother"))
					fv.setNum_pregnancies_mother(Integer.parseInt(obj.getString("num_pregnancies_mother")));
				if (obj.has("num_babies_alive"))
					fv.setNum_babies_alive(Integer.parseInt(obj.getString("num_babies_alive")));
				if (obj.has("num_babies_dead"))
					fv.setNum_babies_dead(Integer.parseInt(obj.getString("num_babies_dead")));
				if (obj.has("how_died"))
					fv.setHow_died(obj.getString("how_died"));
				if (obj.has("num_children_under_5"))
					fv.setNum_children_under_5(obj.getString("num_children_under_5"));
				if (obj.has("num_people_in_household"))
					fv.setNum_people_in_household(obj.getString("num_people_in_household"));
				if (obj.has("fathers_job"))
					fv.setFathers_job(obj.getString("fathers_job"));
				if (obj.has("igss"))
					fv.setIgss(obj.getString("igss"));
				theFamilyVisits.add(fv);
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		f.setFamilyVisits(theFamilyVisits);
	}
	
	private void parseFamily(JSONObject record) {
		try {
			String villageName = record.getString("village");
			int family_id = Integer.parseInt(record.getString("family_id"));
			DetailedFamily df = getFamily(villageName, family_id);
			
			String date_created = record.getString("date_created");
			String date_last_modified = record.getString("date_lost_modified");
			int[] child_ids = convertArray(record.getString("child_ids").trim().split(" "));
			Integer[] childIds = new Integer[child_ids.length];
			for (int j = 0; j < child_ids.length; j++) {
				childIds[j] = child_ids[j];
			}
			
			df.setId(family_id);
			df.setVillage(villageName);
			df.setDate_created(date_created);
			df.setDate_last_modified(date_last_modified);
			df.setChildren(new ArrayList<Integer>(Arrays.asList(childIds)));
			
			if (record.has("parent1_first_name")) 
				df.setParent1_first_name(record.getString("parent1_first_name"));
			if (record.has("parent1_middle_name"))
				df.setParent1_middle_name(record.getString("parent1_middle_name"));
			if (record.has("parent1_last_name"))
				df.setParent1_last_name(record.getString("parent1_last_name"));
			if (record.has("parent1_dob"))
				df.setParent1_date_of_birth(record.getString("parent1_dob"));
			if (record.has("parent2_first_name")) 
				df.setParent2_first_name(record.getString("parent2_first_name"));
			if (record.has("parent2_middle_name"))
				df.setParent2_middle_name(record.getString("parent2_middle_name"));
			if (record.has("parent2_last_name"))
				df.setParent2_last_name(record.getString("parent2_last_name"));
			if (record.has("parent2_dob"))
				df.setParent2_date_of_birth(record.getString("parent2_dob"));	
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void processChildren(JSONObject record) {
		
	}
	
	//How should this be handled?
	private void processFamilyVisits(JSONObject record) {
		try {
			int family_id = Integer.parseInt(record.getString("family_id"));
			String villageName = record.getString("village");
			JSONArray familyVisits = record.getJSONArray("family_visits");
			
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void processFamily(JSONObject record) {
		try {
			int family_id = Integer.parseInt(record.getString("family_id"));
			String villageName = record.getString("village");
			DetailedFamily existingFamily = getFamily(villageName, family_id);
			if (existingFamily != null) { //Need to check timestamps
				String existing_timestamp = existingFamily.getDate_last_modified().replace('T', ' ');
				String this_timestamp = record.getString("date_last_modified").replace('T', ' ');
				
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
				Date existing_date = sdf.parse(existing_timestamp);
				Date this_date = sdf.parse(this_timestamp);
				
				if (this_date.compareTo(existing_date) > 0)  //Need to update family object
					parseFamily(record);
			} else {
				DetailedFamily df = new DetailedFamily();
				mFamilies.get(villageName).add(df);
				df.setId(family_id);
				df.setVillage(villageName);
				df.setFamilyVisits(new ArrayList<FamilyVisit>());
				parseFamily(record);
			}
			processFamilyVisits(record);
			processChildren(record);
		} catch (JSONException | ParseException e) {
			e.printStackTrace();
		}
	}
	
	private void processVillage(JSONObject record) {
		try {
			String villageName = record.getString("village");
			int family_id = Integer.parseInt(record.getString("family_id"));
			if (getVillage(villageName) != null) { 
				Village v = getVillage(villageName);
				if (!v.getFamilies().contains(family_id))
					v.getFamilies().add(family_id);
			} else { 
				Village v = new Village();
				mVillages.add(v);
				v.setName(villageName);
				v.setFamilies(new ArrayList<Integer>());
				v.getFamilies().add(family_id);
				mFamilies.put(villageName, new ArrayList<DetailedFamily>());
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void processData() {
		try {
			GuatemedicReader gr = new GuatemedicReader(mAppContext);

			File[] files = gr.getFiles("Downloads");
			for (File f : files) {
				String content = gr.getStringData(f);
				JSONObject obj = new JSONObject(content);
				JSONArray records = new JSONArray(obj.getString("records"));
				for (int i = 0; i < records.length(); i++) { 
					JSONObject record = records.getJSONObject(i);
					processVillage(record);
					processFamily(record); //This processes family, children, and visits
				}
			} 
			
			//Process locally stored visits, additions, modifications
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
}

