package com.stanford.guatemedic;

import java.util.ArrayList;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.ListFragment;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Filter.FilterResults;

public class ViewFamilyListActivity extends ActionBarActivity {
	
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_view_family_list);
		String village_name = getIntent().getStringExtra("village_name");
		if (savedInstanceState == null) {
			getSupportFragmentManager().beginTransaction()
					.add(R.id.container, ViewFamilyListFragment.newInstance(village_name)).commit();
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.addfamily_button, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_download) {

			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	

	/**
	 * A placeholder fragment containing a simple view.
	 */
	public static class ViewFamilyListFragment extends ListFragment {
		
		private String village_name;
		private ArrayList<DetailedFamily> families;
		private ArrayList<DetailedFamily> data;
		private ArrayList<DetailedFamily> filtered;
		public ViewFamilyListFragment() {
			
		}
		
		public static ViewFamilyListFragment newInstance(String village_name) {
		    ViewFamilyListFragment f = new ViewFamilyListFragment();
		    // Supply index input as an argument.
		    Bundle args = new Bundle();
		    args.putString("village_name", village_name);
		    f.setArguments(args);
		    return f;
		}


		
		@Override
		public void onResume() {
			super.onResume();
			((FamilyAdapter)getListAdapter()).notifyDataSetChanged();
			//getActivity().setTitle(R.string.villages_title);
		}

		@Override
		public void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			//getActivity().setTitle(R.string.villages_title);
			
			Bundle args = getArguments();
			village_name = args.getString("village_name");
			
			families = DetailedRecordsStore.get(getActivity()).getFamilies(village_name);
			FamilyAdapter adapter = new FamilyAdapter(families);
			setListAdapter(adapter);
		}
		
		@Override
		public void onListItemClick(ListView l, View v, int position, long id) {
			DetailedFamily family = families.get(position);
			Intent intent = new Intent(getActivity().getApplication(), ViewChildListActivity.class);
			intent.putExtra("family_id", family.getFamily_id());
			startActivity(intent);
		}
		
		private class FamilyAdapter extends ArrayAdapter<DetailedFamily> implements Filterable  {
			public FamilyAdapter(ArrayList<DetailedFamily> families) {
				super(getActivity(), 0, families);
			}
			
			@Override
			public View getView(final int position, View convertView, ViewGroup parent) {
				if (convertView == null) {
					convertView = getActivity().getLayoutInflater().inflate(R.layout.list_item_fragment, null);
					convertView.findViewById(R.id.list_item_checkbox).setVisibility(View.GONE);
				}
				
				DetailedFamily family = getItem(position);
				String family_id = family.getFamily_id();
				
				TextView familyTitle = (TextView)convertView.findViewById(R.id.list_item_title);
				familyTitle.setText(family_id);
				
				
				
				return convertView;
				
			}
			public Filter getFilter() {
		        return new Filter() {

		            @SuppressWarnings("unchecked")
		                protected void publishResults(CharSequence constraint, FilterResults results) {
		                //Log.d(TAG, "**** PUBLISHING RESULTS for: " + constraint);
		            	
		                data = (ArrayList<DetailedFamily>)results.values;
		                notifyDataSetChanged();
		            	}
		            
		            protected FilterResults performFiltering(CharSequence constraint) {
		               // Log.d(TAG, "**** PERFORM FILTERING for: " + constraint);
		                constraint = constraint.toString().toLowerCase();
		               
		 
		                FilterResults results = new FilterResults();
		                if(constraint != null && constraint.toString().length() > 0) {
		                       
		                        ArrayList<DetailedFamily> filt = new ArrayList<DetailedFamily>();
		                        ArrayList<DetailedFamily> lData = new ArrayList<DetailedFamily>();
		                       
		                        synchronized (this) {
		                                lData.addAll(data);
		                    }
		                    filt.clear();
		                    for(int i = 0; i < lData.size(); i++) {
		                        DetailedFamily m = lData.get(i);
		                        if((m.getParent1_name().toLowerCase()).contains(constraint))
		                        	{
		                            filt.add(m);
		                        	}
		                    }
		                    results.count = filt.size();
		                    results.values = filt;                 
		                }               
		                else {
		                       
		                    synchronized(this)
		                    {
		                        results.count = filtered.size();
		                        results.values = filtered;
		                    }
		                }
		                return results;
		            }
		        };
		    } 
			@Override
			public int getCount() {
				return data.size();
			}
			@Override
			public DetailedFamily getItem(int position){
				return data.get(position);
			}

		 
			@Override
		    public long getItemId(int position) {
		        return position;
		    }
		}

	}	

}
