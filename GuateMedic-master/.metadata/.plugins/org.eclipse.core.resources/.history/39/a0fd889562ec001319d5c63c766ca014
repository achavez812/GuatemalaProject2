package com.example.guatemedic;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

public class UploadDataFragment extends Fragment{
	
	String authorization_key;
	
	ArrayList<UploadFamily> families;
	ArrayList<UploadChild> children;
	ArrayList<UploadFamilyVisit> familyVisits;
	ArrayList<UploadChildVisit> childVisits;
	ArrayList<UploadFamilyModification> familyModifications;
	ArrayList<UploadChildModification> childModifications;
	
	public UploadDataFragment() {
		authorization_key = DetailedRecordsStore.get(getActivity()).getAuthKey();
		families = new ArrayList<UploadFamily>();
		children = new ArrayList<UploadChild>();
		familyVisits = new ArrayList<UploadFamilyVisit>();
		childVisits = new ArrayList<UploadChildVisit>();
		familyModifications = new ArrayList<UploadFamilyModification>();
		childModifications = new ArrayList<UploadChildModification>();
	}
	
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		
		//Inflate the layout for this fragment
		View v = inflater.inflate(R.layout.upload_data_fragment, container, false);
		processData();
		postData();
		
		
		
		return v;
	}
	
	private class PostModifications extends AsyncTask<Void, Void, Void> {
		@Override
		protected Void doInBackground (Void ...params) {
			return null;
		}
	}
	
	private class PostVisits extends AsyncTask<Void, Void, Void> {
		@Override
		protected Void doInBackground (Void ...params) {
			return null;
		}
	}
	
	private class PostChildren extends AsyncTask<Void, Void, Void> {
		@Override
		protected Void doInBackground (Void ...params) {
			return null;
		}
	}

	private class PostFamilies extends AsyncTask<Void, Void, Void> {
		@Override
		protected Void doInBackground (Void ...params) {
			try {
				JSONArray arr = new JSONArray();
				for (UploadFamily uf : families) {
					if (!uf.isUploaded()) {
						arr.put(new JSONObject(uf.getData()));
					}
				}
				Map<String, String> headerMap = new HashMap<String, String>();
				headerMap.put("Authorization", authorization_key);
				String response = new HttpPostRequest().postUrl("https://guatemedic.herokuapp.com/createFamily", headerMap, arr.toString());
				JSONArray responseArray = new JSONArray(response);
				for (int i = 0; i < responseArray.length(); i++) {
					JSONObject obj = new JSONObject(responseArray.getString(i));
				}
			} catch (JSONException | IOException e) {
				e.printStackTrace();
			}
			return null;
		}
	}
	
	private void postData() {
		try {
			new PostFamilies().execute().get();
			new PostChildren().execute().get();
			new PostVisits().execute().get();
			new PostModifications().execute().get();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private ArrayList<String> getChildren(String family_id) {
		ArrayList<String> childIds = new ArrayList<String>();
		for (UploadChild child : children) {
			if (child.getTempFamilyId().equals(family_id))
				childIds.add(child.getChildId());
		}
		return childIds;
	}
	
	private ArrayList<String> getFamilyVisits(String family_id) {
		ArrayList<String> familyVisitIds = new ArrayList<String>();
		for (UploadFamilyVisit visit : familyVisits) {
			if (visit.getTempFamilyId().equals(family_id))
				familyVisitIds.add(visit.getVisitId());
		}
		return familyVisitIds;
	}
	
	private ArrayList<String> getChildVisits(String child_id) {
		ArrayList<String> childVisitIds = new ArrayList<String>();
		for (UploadChildVisit visit : childVisits) {
			if (visit.getTempChildId().equals(child_id))
				childVisitIds.add(visit.getVisitId());
		}
		return childVisitIds;
	}
	
	private ArrayList<String> getFamilyModifications(String family_id) {
		ArrayList<String> familyModificationIds = new ArrayList<String>();
		for (UploadFamilyModification modification : familyModifications) {
			if (modification.getTempFamilyId().equals(family_id))
				familyModificationIds.add(modification.getModficationId());
		}
		return familyModificationIds;
	}
	
	private ArrayList<String> getChildModifications(String child_id) {
		ArrayList<String> childModificationIds = new ArrayList<String>();
		for (UploadChildModification modification : childModifications) {
			if (modification.getTempChildId().equals(child_id))
				childModificationIds.add(modification.getModficationId());
		}
		return childModificationIds;
	}
	
	private void processFamilies() {
		GuatemedicReader gr = new GuatemedicReader(getActivity().getApplication()); //CHECK THIS OUT IF ERROR
		File[] files = gr.getFiles(gr.newFamily_prefix);
		try {
			for (File f : files) {
				String content = gr.getStringData(f);
				JSONObject obj = new JSONObject(content);
				UploadFamily uf = new UploadFamily();
				families.add(uf);
				
				uf.setTempFamilyId(obj.getString("temp_family_id"));
				uf.setFamilyId(obj.getString("family_id"));
				uf.setUploaded(obj.getString("uploaded").equals("1"));
				uf.setFilename(f.getName());
				
				uf.setChildIds(getChildren(obj.getString("family_id")));
				uf.setVisitIds(getFamilyVisits(obj.getString("family_id")));
				uf.setModificationIds(getFamilyModifications(obj.getString("family_id")));
				
				obj.remove("temp_family_id");
				obj.remove("family_id");
				obj.remove("uploaded");
				
				uf.setData(obj.toString());
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void processChildren() {
		GuatemedicReader gr = new GuatemedicReader(getActivity().getApplication()); //CHECK THIS OUT IF ERROR
		File[] files = gr.getFiles(gr.newChildVisit_prefix);
		try {
			for (File f : files) {
				String content = gr.getStringData(f);
				JSONObject obj = new JSONObject(content);
				UploadChild uc = new UploadChild();
				children.add(uc);
				uc.setChildId(obj.getString("temp_child_id"));
				uc.setChildId(obj.getString("child_id"));
				uc.setTempFamilyId(obj.getString("temp_family_id"));
				uc.setFamilyId(obj.getString("family_id"));
				uc.setUploaded(obj.getString("uploaded").equals("1"));
				
				uc.setVisitIds(getChildVisits(obj.getString("child_id")));
				uc.setModificationIds(getChildModifications(obj.getString("child_id")));
				
				obj.remove("temp_child_id");
				obj.remove("temp_family_id");
				obj.remove("child_id");
				obj.remove("uploaded");
				
				uc.setData(obj.toString());
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void processFamilyVisits() {
		GuatemedicReader gr = new GuatemedicReader(getActivity().getApplication()); //CHECK THIS OUT IF ERROR
		File[] files = gr.getFiles(gr.newChild_prefix);
		try {
			for (File f : files) {
				String content = gr.getStringData(f);
				JSONObject obj = new JSONObject(content);
				UploadFamilyVisit ufv = new UploadFamilyVisit();
				familyVisits.add(ufv);
				ufv.setVisitId(obj.getString("visit_id"));
				ufv.setTempFamilyId(obj.getString("temp_family_id"));
				ufv.setFamilyId(obj.getString("family_id"));
				ufv.setUploaded(obj.getString("uploaded").equals("1"));
				
				obj.remove("uploaded");
				obj.remove("visit_id");
				obj.remove("temp_family_id");
				
				ufv.setData(obj.toString());
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void processChildVisits() {
		GuatemedicReader gr = new GuatemedicReader(getActivity().getApplication()); //CHECK THIS OUT IF ERROR
		File[] files = gr.getFiles(gr.newChildVisit_prefix);
		try {
			for (File f : files) {
				String content = gr.getStringData(f);
				JSONObject obj = new JSONObject(content);
				UploadChildVisit ucv = new UploadChildVisit();
				childVisits.add(ucv);
				ucv.setVisitId(obj.getString("visit_id"));
				ucv.setTempChildId(obj.getString("temp_child_id"));
				ucv.setChildId(obj.getString("child_id"));
				ucv.setUploaded(obj.getString("uploaded").equals("1"));
				
				obj.remove("uploaded");
				obj.remove("visit_id");
				obj.remove("temp_child_id");
				
				ucv.setData(obj.toString());
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void processVisits() {
		processChildVisits();
		processFamilyVisits();
	}	
	
	private void processFamilyModifications() {
		GuatemedicReader gr = new GuatemedicReader(getActivity().getApplication()); //CHECK THIS OUT IF ERROR
		File[] files = gr.getFiles(gr.newFamilyModification_prefix);
		try {
			for (File f : files) {
				String content = gr.getStringData(f);
				JSONObject obj = new JSONObject(content);
				UploadFamilyModification ufm = new UploadFamilyModification();
				familyModifications.add(ufm);
				ufm.setModificationId(obj.getString("modification_id"));
				ufm.setTempFamilyId(obj.getString("temp_family_id"));
				ufm.setFamilyId(obj.getString("family_id"));
				ufm.setUploaded(obj.getString("uploaded").equals("1"));
				
				obj.remove("uploaded");
				obj.remove("modification_id");
				obj.remove("temp_family_id");
				
				ufm.setData(obj.toString());
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void processChildModifications() {
		GuatemedicReader gr = new GuatemedicReader(getActivity().getApplication()); //CHECK THIS OUT IF ERROR
		File[] files = gr.getFiles(gr.newChildModification_prefix);
		try {
			for (File f : files) {
				String content = gr.getStringData(f);
				JSONObject obj = new JSONObject(content);
				UploadChildModification ucm = new UploadChildModification();
				childModifications.add(ucm);
				ucm.setModificationId(obj.getString("modification_id"));
				ucm.setTempChildId(obj.getString("temp_child_id"));
				ucm.setChildId(obj.getString("child_id"));
				ucm.setUploaded(obj.getString("uploaded").equals("1"));
				
				obj.remove("uploaded");
				obj.remove("modification_id");
				obj.remove("temp_child_id");
				
				ucm.setData(obj.toString());
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}
	}
	
	private void processModifications() {
		processChildModifications();
		processFamilyModifications();
	}
	
	private void processData() {
		processModifications();
		processVisits();
		processChildren();
		processFamilies();
	}
	
}
